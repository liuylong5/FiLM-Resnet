!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5537) -  9 Feb 2015 10:01
!
!  Differentiation of aqchem in reverse (adjoint) mode:
!   gradient     of useful results: gas betaso4 aerosol
!   with respect to varying inputs: gas alfa0 betaso4 alfa3 aerosol
!   RW status of diff variables: alfa3_kpp:(loc) gm1:(loc) gm2:(loc)
!                var:(loc) stion:(loc) gm2log:(loc) gm1log:(loc)
!                rconst:(loc) fix:(loc) a:(loc) gas:in-out alfa0:out
!                betaso4:in-zero alfa3:out aerosol:in-out
!------------------------------------------------------------------------!
!  The Community Multiscale Air Quality (CMAQ) system software is in     !
!  continuous development by various groups and is based on information  !
!  from these groups: Federal Government employees, contractors working  !
!  within a United States Government contract, and non-Federal sources   !
!  including research institutions.  These groups give the Government    !
!  permission to use, prepare derivative works of, and distribute copies !
!  of their work in the CMAQ system to the public and to permit others   !
!  to do so.  The United States Environmental Protection Agency          !
!  therefore grants similar permission to use the CMAQ system software,  !
!  but users are requested to provide copies of derivative works or      !
!  products designed to operate in the CMAQ system to the United States  !
!  Government without restrictions as to use by others.  Software        !
!  that is used with the CMAQ system but distributed under the GNU       !
!  General Public License or the GNU Lesser General Public License is    !
!  subject to their copyright restrictions.                              !
!------------------------------------------------------------------------!
! RCS file, release, date & time of last delta, author, state, [and locker]
! $Header: /project/work/rep/arc/CCTM/src/cloud/cloud_acm_ae6/aqchem.F,v 1.6 2012/03/19 15:43:49 yoj Exp $
! what(1) key, module and SID; SCCS file; date and time of last delta:
! %W% %P% %G% %U%
!-----------------------------------------------------------------------
!  Description:
!    Compute concentration changes in cloud due to aqueous chemistry,
!    scavenging and wet deposition amounts.
!
!  Revision History:
!      No   Date   Who  What
!      -- -------- ---  -----------------------------------------
!      0  / /86    CW   BEGIN PROGRAM - Walceks's Original Code
!      1  / /86    RB   INCORPORATE INTO RADM
!      2  03/23/87 DH   REFORMAT
!      3  04/11/88 SJR  STREAMLINED CODE - ADDED COMMENTS
!      4  08/27/88 SJR  COMMENTS, MODIFIED FOR RPM
!      4a 03/15/96 FSB  Scanned hard copy to develop Models3
!                       Version.
!      5  04/24/96 FSB  Made into Models3 Format
!      6  02/18/97 SJR  Revisions to link with Models3
!      7  08/12/97 SJR  Revised for new concentration units (moles/mole)
!                       and new treatment of nitrate and nitric acid
!      8  01/15/98 sjr  revised to add new aitken mode scavenging
!                       and aerosol number scavenging
!      9  12/15/98 David Wong at LM:
!             -- change division of XL, TEMP to multiplication of XL, TEMP
!                reciprocal, respectively
!             -- change / TOTOX / TSIV to / ( TOTOX * TSIV )
!     10  03/18/99 David Wong at LM:
!             -- removed "* 1.0" redundant calculation at TEMP1 calculation
!     11  04/27/00 sjr  Added aerosol surface area as modeled species
!     12  12/02    sjr  changed calls to HLCONST and updated the dissociation
!                       constants
!     13  06/26/03 sjr  revised calculations of DTW based on CMAS website
!                       discussions
!     14  08/05/03 sjr  revision made to the coarse aerosol number washout
!     15  04/20/05  us  revisions to add sea salt species in the fine and
!                       coarse aerosol modes, and HCl dissolution/dissociation
!     16  10/13/05 sjr  fixed bug in the integration time step calculation
!                       (reported by Bonyoung Koo)
!     17  03/01/06 sjr  added elemental carbon aerosol; organic aerosols
!                       replaced with primary, secondary biogenic, and
!                       secondary anthropogenic; fixed 3rd moment calc to
!                       include EC and primary organics (not secondary);
!                       re-arranged logic for setting Cl & Na ending conc;
!                       added pointers/indirect addressing for arrays WETDEP
!                       and LIQUID
!     16  03/30/07 sjr  Limit integration timestep by cloud washout time
!     17  04/10/07 sjr  increased loop limits as follows: I20C <10000,
!                       I7777C <10000, I30C <10000, ICNTAQ <60000
!     18  01/10/07 agc  added organic chemistry for GLY and MGLY oxidation
!     19  09/10/07 sln  updated SOA species list for AE5
!     20  01/29/08 agc  updated DOHDT calculation
!     21  04/14/08 jtk  added coding for coarse NH4 and scavenging of
!                       coarse surface area
!     22  05/20/08 agc  for CB05, use the Henry's Law constant for glyoxal
!                       as a surrogate for methyl glyoxal
!     23  04/15/09 sjr& Several changes made to improve mass conservation in the
!                  agc  solver.  (1) OH concentration is now considered to be
!                       steady state; (2) only allow sulfur oxidation to affect
!                       time step; (3) implemented mass conservation checks -
!                       limit oxidation rates by the available mass for the
!                       specified timestep.
!   10 Oct 10 J.Young:  update to use aero_reeng by Steve Howard, Prakash Bhave,
!                       Jeff Young, Sergey Napelenok, and Shawn Roselle
!   01 Mar 11 S.Roselle: replaced I/O API include files with UTILIO_DEFN
!    9 Mar 11 S.Napelenok: update for AE6 - pH calculation now expanded to
!                       include Ca Mg K SOIL CORS SEAS
!   23 May 11 G.Sarwar: update S(VI) production rate via H2O2, O3, MHP, PAA
!                       pathways (Jacobson 1997)
!   23 May 11 G.Sarwar: update S(VI) production rate via O2 pathway (metal
!                       catalysis) (Martin and Goodman, 1991)
!   01 Jul 11 G.Sarwar: Incorporate day and night dependent Fe III oxidation
!                       state (Alexander et al.,  2009)
!   12 Aug 11 G.Sarwar: Revise Fe and Mn solubility based on
!                       Alexander et al., 2009
!    8 Mar 12 J.Bash:   FE_OX and MN_OX were calculated from FE and MN before
!                       a floor value of 0.0 was established for these
!                       concentrations sometimes resulting in negative
!                       concentrations and model crashes. The code used to
!                       estimate FE_OX and MN_OX was moved to be after a floor
!                       value for FE and MN was set. Also the washout rate was
!                       removed from the calculation of the estimate for doubling
!                       the time step based on sulfur oxidized < 5%.
!   28 Nov 12 G.Sarwar: Sulfate inhibition effect is implemented in the metal catalysis pathway
!   04 Mar 14 K. Fahey: Used the Kinetic PreProcessor to generate the RODAS3 solver
!                       for the CMAQ aqueous phase chemistry mechanism (Damian et al., 2002).
!                       Aitken scavenging, mass transfer between the phases, dissociation,
!                       chemical kinetics, and wet deposition are solved dynamically
!                       and simultaneously.  The mass transfer between the phases is
!                       based on the resistance model of Schwartz (Schwartz, 1986).  The SIV-O3
!                       oxidation reaction has been corrected for potential aqueous
!                       diffusion limitations.
!  07 Jul 14 B.Hutzell: replaced mechanism include file(s) with fortran module
!
!  References:
!     Walcek & Taylor, 1986, A theoretical Method for computing
!        vertical distributions of acidity and sulfate within cumulus
!        clouds, J. Atmos Sci.,  Vol. 43, no. 4 pp 339 - 355
!     Carlton, A.G., B.J. Turpin, K.E. Altieri, S.P. Seitzinger, R. Mathur,
!        S.J. Roselle, and R.J. Weber, CMAQ Model Performance Enhanced When
!        In-Cloud Secondary Organic Aerosol is Included:  Comparison of Organic
!        Carbon Predictions with Measurements, Environ. Sci. Technol., 42(23),
!        8798-8802, 2008.
!     Jacobson, M., Development and application of a new air pollution modeling
!        system II. Aerosol module structure and design, Atmospheric
!        Environment, 31, 131-144, 1997
!     Martin, R.L. and T.W. Good, catalyzed oxidation of sulfur dioxide in
!        solution: the iron-manganese synergism, Atmospheric Environment, 25A,
!        2395-2399, 1991
!     Alexander, B., R.J. Park, D.J. Jacob, S. Gong, Transition metal-catalyzed
!        oxidation of atmospheric sulfur: global implications for the sulfur
!        budget, GRL, 114, D02309, 2009
!     Damian, V., A. Sandu, M. Damian, F. Potra, and G.R. Carmichael, The Kinetic
!        PreProcessor KPP -- A Software Environment for Solving Chemical Kinetics,
!        Computers and Chemical Engineering, 26(11), 1567-1579, 2002.
!     Schwartz, S.E., Mass transport considerations pertinent to aqueous-phase
!        reactions of gases in liquid water clouds. In Chemistry of multiphase
!        atmospheric systems, NATO ASI Series, G6, 415-471, 1986.
!
!
!  Called by:  AQMAP
!
!  Calls the following subroutines:  Initialize, Update_RCONST, INTEGRATE
!
!  Calls the following functions:
!
!  Arguments     Type      I/O       Description
!  ---------     ----  ------------  --------------------------------
!  GAS(ngas)     real  input&output  Concentration for species i=1,15
!  GASWDEP(ngas) real     output     wet deposition for species
!
!  AEROSOL(naer,nmodes) real input&output   Concentration for species i=1,51
!  AERWDEP(naer,nmodes) real     output     wet deposition for species
!-----------------------------------------------------------------------
!:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      SUBROUTINE AQCHEM_B(jdate, jtime, temp2, pres_pa, taucld, prcrate, wcavg
     + , wtavg, airm, alfa0, alfa0b, alfa2, alfa3, alfa3b, gas, gasb, aerosol
     + , aerosolb, gaswdep, aerwdep, hpwdep, betaso4, betaso4b, mechchk)
!-----------------------------------------------------------------------
        USE AQ_DATA
!slz      USE UTILIO_DEFN
! FROM KPP MAIN     **************************
        USE AQCHEM_MODEL
        USE AQCHEM_INITIALIZE_B, ONLY : initialize, initialize_b
        IMPLICIT NONE
!...formats
!1001  FORMAT ( 1X, 'STORM RATE=', F6.3, 'DSIVDT(0) =', F10.5,
!     &       'TS6=', F10.5, 'DTW(0)=', F10.5, 'CTHK1=', F10.5,
!     &       'WTAVG=', F10.5 )
! kf comment below for CMAQ
!     INCLUDE 'new_AQ_PARAMS.EXT'      ! aqueous chemistry parameters for box
! kf
!      INCLUDE SUBST_CONST          ! constants
!      INCLUDE SUBST_RXCMMN         ! Mechanism reaction common block
! Exit status message
        CHARACTER(len=120), SAVE :: xmsg=' '
!..........Parameters:
! number of oxidation reactions
        INTEGER, PARAMETER :: numox=5
! water density at 20 C and 1 ATM (kg/m3)
        REAL*8, PARAMETER :: h2odens=1000.0d0
! convert seconds to hours
        REAL*8, PARAMETER :: sec2hr=1.0d0/3600.0d0
!...........Arguments:
! current model date, coded YYYYDDD
        INTEGER, INTENT(IN) :: jdate
! current model time, coded HHMMSS
        INTEGER, INTENT(IN) :: jtime
! total air mass in cloudy layers (mol/m2)
        REAL, INTENT(IN) :: airm
! scav coef for aitken aerosol number
        REAL, INTENT(IN) :: alfa0
        REAL :: alfa0b
! scav coef for aitken aerosol sfc area
        REAL, INTENT(IN) :: alfa2
! scav coef for aitken aerosol mass
        REAL, INTENT(IN) :: alfa3
        REAL :: alfa3b
! hydrogen wet deposition (mm mol/liter)
        REAL, INTENT(OUT) :: hpwdep
        REAL*8 :: betaso4
        REAL*8 :: betaso4b
! precip rate (mm/hr)
        REAL, INTENT(IN) :: prcrate
! pressure (Pa)
        REAL, INTENT(IN) :: pres_pa
! timestep for cloud (s)
        REAL, INTENT(IN) :: taucld
! temperature (K)
        REAL, INTENT(IN) :: temp2
! liquid water content (kg/m3)
        REAL, INTENT(IN) :: wcavg
! total water content (kg/m3)
        REAL, INTENT(IN) :: wtavg
!      LOGICAL,   INTENT( IN )  :: CB5       ! CB5 = TRUE means CB05 gas phase mechanism
!      LOGICAL,   INTENT( IN )  :: DARK      ! DARK = TRUE is night,  DARK = FALSE is day
        CHARACTER(len=32), INTENT(IN) :: mechchk
! gas phase concentrations (mol/molV)
        REAL*8, INTENT(INOUT) :: gas(ngas)
        REAL*8 :: gasb(ngas)
! aerosol concentrations (mol/molV)
        REAL*8, INTENT(INOUT) :: aerosol(naer, nmodes)
        REAL*8 :: aerosolb(naer, nmodes)
! gas phase wet deposition array (mm mol/liter)
        REAL*8, INTENT(INOUT) :: gaswdep(ngas)
! aerosol wet deposition array (mm mol/liter)
        REAL*8, INTENT(INOUT) :: aerwdep(naer, nmodes)
!...........Local Variables (scalars):
! flag for first pass thru
        LOGICAL, SAVE :: firstime=.true.
! driver program name
        CHARACTER(len=16), SAVE :: pname='AQCHEM'
! Henry's law surrogate for MGLY
        CHARACTER(len=16), SAVE :: mglysur='METHYL_GLYOXAL  '
        REAL*8 :: cthk1, test
        REAL*8 :: one_over_temp
        REAL*8 :: wfactor, invcfac
        REAL*8 :: depsum, expwet
        REAL*8 :: depsumb
        REAL*8 :: totnit, totamm, totcl
        REAL*8 :: totnitb, totammb
        REAL*8 :: fnh3, fnh4acc
        REAL*8 :: fnh3b, fnh4accb
        REAL*8 :: fhno3, fno3acc
        REAL*8 :: fhno3b, fno3accb
        REAL*8 :: fhcl, fclacc
        REAL*8 :: fclaccb
!      REAL( 8 ) :: NACOR, CACOR, MGCOR, KCOR, FECOR, MNCOR
!      REAL( 8 ) :: WDNACOR, WDCACOR, WDMGCOR, WDKCOR, WDFECOR, WDMNCOR
!      REAL( 8 ) :: S_INIT, S_FINAL, S_PTDIFF
!      REAL( 8 ) :: S_FINAL2, S_PTDIFF2
        REAL :: heff, k1, k2, ratio
        INTEGER :: j
! FROM KPP MAIN     **************************
        REAL(kind=dp) :: t, dval(nspec)
        REAL(kind=dp) :: rstate(20)
        INTEGER :: i
!*****************************************
        INTEGER :: igas, iaer, imod, count
        INTEGER :: xstat2, xstat3
!...........External Functions:
        INTEGER, SAVE :: logdev
        INTEGER, EXTERNAL :: SETUP_LOGDEV
        INTRINSIC INDEX
        INTRINSIC EXP
        INTRINSIC MAX
        REAL(kind=dp) :: arg1
        REAL*8 :: tmp
        REAL*8 :: tmp0
        REAL*8 :: tmp1
        REAL*8 :: tmp2
        REAL*8 :: tmp3
        REAL*8 :: tmp4
        REAL*8 :: tmp5
        REAL*8 :: tmp6
        INTEGER :: ad_count
        INTEGER :: i0
        INTEGER :: branch
        REAL*8 :: temp3
        REAL*8 :: temp1
        REAL*8 :: temp0
        REAL*8 :: tempb8
        REAL(kind=dp) :: tempb7
        REAL(kind=dp) :: tempb6
        REAL(kind=dp) :: tempb5
        REAL(kind=dp) :: tempb4
        REAL(kind=dp) :: tempb3
        REAL(kind=dp) :: tempb2
        REAL*8 :: tempb1
        REAL*8 :: tmpb6
        REAL*8 :: tempb0
        REAL*8 :: tmpb5
        REAL*8 :: tmpb4
        REAL*8 :: tmpb3
        REAL*8 :: tmpb
        REAL*8 :: tmpb2
        REAL*8 :: tmpb1
        REAL*8 :: tmpb0
        REAL*8 :: aerwdepb(naer, nmodes)
        REAL*8 :: tempb
        REAL*8 :: temp4

!~~>  NADJ = Number of functionals for which sensitivities are computed
!     Note: the setting below is for sensitivities of all final concentrations;
!           the setting may have to be changed for other applications
      INTEGER, PARAMETER :: NADJ = 1
      REAL(kind=dp), DIMENSION(NVAR) :: varb, ATOL_adj, RTOL_adj

!~~>  Control (in) and status (out) arguments for the integration
      REAL(kind=dp), DIMENSION(20) :: RCNTRL, RSTATUS
      INTEGER,       DIMENSION(20) :: ICNTRL, ISTATUS
! FIRSTIME
!*********************************************************************
!...Initialization
        IF (firstime) THEN
!...special treatment of MGLY for CB05 mechanism:
!...  use Henry's law constant for glyoxal as a surrogate for methyl glyoxal
          IF (INDEX(mechchk, 'CB05') .GT. 0) mglysur = 'GLYOXAL         '
        END IF
        IF (INDEX(mglysur, 'METHYL') .GT. 0) THEN
          mglyh = 3.2d+04
        ELSE
          mglyh = 3.6d+05
        END IF
!!!!!!!!!!!!!!! FROM KPP MAIN !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!~~~> Initialization
      STEPMIN = 0.0d0
!...compute fractional weights for several species
! NEEDED TO CALCULATE END DISTRIBUTIONS (TO KEEP CONSISTENT WITH BASE)
!+ AEROSOL( LNO3, COR )
        totnit = gas(lhno3) + aerosol(lno3, acc)
        IF (totnit .GT. 0.0d0) THEN
          fhno3 = gas(lhno3)/totnit
          CALL PUSHCONTROL1B(0)
        ELSE
          fhno3 = 1.0d0
          CALL PUSHCONTROL1B(1)
        END IF
        IF (aerosol(lno3, acc) + aerosol(lno3, cor) .GT. 0.0d0) THEN
!just aerosol
          fno3acc = aerosol(lno3, acc)/(aerosol(lno3, acc)+aerosol(lno3, cor))
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
          fno3acc = 1.d0
        END IF
!+ AEROSOL( LNH4, COR )
        totamm = gas(lnh3) + aerosol(lnh4, acc)
        IF (totamm .GT. 0.0d0) THEN
          fnh3 = gas(lnh3)/totamm
          CALL PUSHCONTROL1B(0)
        ELSE
          fnh3 = 1.0d0
          CALL PUSHCONTROL1B(1)
        END IF
        IF (aerosol(lnh4, acc) + aerosol(lnh4, cor) .GT. 0.0d0) THEN
!just aerosol
          fnh4acc = aerosol(lnh4, acc)/(aerosol(lnh4, acc)+aerosol(lnh4, cor))
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
          fnh4acc = 1.d0
        END IF
        IF (aerosol(lcl, acc) + aerosol(lcl, cor) .GT. 0.0d0) THEN
!just aerosol
          fclacc = aerosol(lcl, acc)/(aerosol(lcl, acc)+aerosol(lcl, cor))
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
          fclacc = 1.d0
        END IF
!!!!!!!!!!
! cloud thickness (m)
        cthk1 = airm*temp2*0.08206d0/(pres_pa/101325.d0*1000.0d0)
!kf      CALL Initialize()
        CALL PUSHREAL4ARRAY(var, dp*nvar/4)
        CALL INITIALIZE(temp2, pres_pa, taucld, prcrate, wcavg, wtavg, airm,
     +           alfa0, alfa3, gas, aerosol, cthk1)
!, DARK )
        invcfac = 1.d0/cfactor
!			 S_INIT = 0.d0
!			 S_FINAL = 0.d0
!			 S_PTDIFF =  0.d0
!			 S_FINAL2 = 0.d0
!			 S_PTDIFF2 =  0.d0
!      S_INIT = var(ind_G_SO2)+var(ind_L_SO2) + var(ind_L_HSO3MIN) +
!           var(ind_L_SO3MIN2) + var(ind_A_SO4AKN) +
!	   var(ind_L_H2SO4) + var(ind_L_HSO4MIN) +
!	   var(ind_L_SO4MIN2)
!~~~> Time loop
        t = tstart
        CALL PUSHREAL4ARRAY(var, dp*nvar/4)
        ad_count = 0
      kron:DO WHILE (t .LT. tend)
          time = t
!        CALL SaveData()
!        CALL Update_SUN()
          CALL UPDATE_RCONST()
!slz          CALL PUSHREAL4ARRAY(arg1, dp/4)
          arg1 = t + dt
!slz          CALL PUSHREAL4ARRAY(a, dp*nreact/4)
!slz          CALL PUSHREAL4ARRAY(rconst, dp*nreact/4)
!slz          CALL PUSHREAL4ARRAY(time, dp/4)
!slz          CALL PUSHREAL4ARRAY(var, dp*nvar/4)
          CALL INTEGRATE(tin=t, tout=t+dt, rstatus_u=rstate, icntrl_u=(/1, 0,
     +            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/))
! rodas3 - autonomous
!        ICNTRL_U = (/ 1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! ros2 - autonomous
!        ICNTRL_U = (/ 1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! ros3 - autonomous
!	 ICNTRL_U = (/ 1,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! ros4 - autonomous
!        ICNTRL_U = (/ 1,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! rodas4 - autonomous
!        ICNTRL_U = (/ 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! rodas3 - default
!kf        ICNTRL_U = (/ 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! ros2
!kf        ICNTRL_U = (/ 0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! ros3
!kf        ICNTRL_U = (/ 0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /) )  ! rodas4
!kf	ICNTRL_U = (/ 0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /))
!	write(6,*) VAR(ind_L_GLY), VAR(ind_L_ORGC), VAR(ind_G_GLY)
!	write(6,*) VAR(ind_L_MGLY), VAR(ind_G_MGLY)
!	write(6,*)(VAR(ind_G_GLY) + VAR(ind_L_GLY))*INVCFAC*1e9
!	pause
!slz          CALL PUSHREAL4ARRAY(t, dp/4)
          t = rstate(1)
          ad_count = ad_count + 1
        END DO kron
!slz        CALL PUSHINTEGER4(ad_count)
!            S_FINAL = var(ind_G_SO2)+var(ind_L_SO2) + var(ind_L_HSO3MIN) +
!           var(ind_L_SO3MIN2) + var(ind_A_SO4AKN) +
!	   var(ind_L_H2SO4) + var(ind_L_HSO4MIN) +
!	   var(ind_L_SO4MIN2) + var(ind_WD_SO2) + var(ind_WD_H2SO4)
!	   IF(S_INIT .gt. 0d0) then
!	   S_PTDIFF = 100.d0 * (S_INIT - S_FINAL) / S_INIT
!	   else
!	   write(6,*) "NO INIT S"
!	   endif
!END PROGRAM aqchem_Driver
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!     Output
        aerwdep = 0.d0
!1/XC1 in original AQCHEM
        wfactor = wcavg*cthk1*phi2
        expwet = EXP(-(wetfac_kpp*taucld))
!	K1 = 1.39E-02*EXP(1870*DELINVT)
!	K2 = 6.72E-08*EXP(355*DELINVT)
!	HEFF = 1.4*EXP(2900*DELINVT) !*
!	(1+K1/(var(ind_L_HPLUS)*PHI2)+K1*K2/(var(ind_L_HPLUS)*PHI2)/(var(ind_L_HPLUS)*PHI2))
!	RATIO =  (VAR(ind_L_SO2) + VAR(ind_L_HSO3MIN) + VAR(ind_L_SO3MIN2))*PHI2 /
!	((VAR(ind_G_SO2))*INVCFAC)
!	RATIO =  (VAR(ind_L_SO2))*PHI2 /
!	((VAR(ind_G_SO2))*INVCFAC)
!	write(6,*) HEFF, RATIO
!	pause
!    AEROSOL SPECIES, AKN
        CALL PUSHREAL8(aerosol(lno3, akn))
        aerosol(lno3, akn) = var(ind_a_no3akn)*invcfac
        CALL PUSHREAL8(aerosol(lnh4, akn))
        aerosol(lnh4, akn) = var(ind_a_nh4akn)*invcfac
        CALL PUSHREAL8(aerosol(lcl, akn))
        aerosol(lcl, akn) = var(ind_a_clakn)*invcfac
        CALL PUSHREAL8(aerosol(lna, akn))
        aerosol(lna, akn) = var(ind_a_naakn)*invcfac
        CALL PUSHREAL8(aerosol(lso4, akn))
        aerosol(lso4, akn) = var(ind_a_so4akn)*invcfac
        CALL PUSHREAL8(aerosol(lec, akn))
        aerosol(lec, akn) = var(ind_a_pecakn)*invcfac
!slz        CALL PUSHREAL8(aerosol(lpoa, akn))
!slz        aerosol(lpoa, akn) = var(ind_a_poaakn)*invcfac
        CALL PUSHREAL8(aerosol(lpri, akn))
        aerosol(lpri, akn) = var(ind_a_priakn)*invcfac
        CALL PUSHREAL8(aerosol(lnum, akn))
        aerosol(lnum, akn) = aerosol(lnum, akn)*EXP(-(alfa0*taucld))
!    AERWDEP, COR
!	AERWDEP(LSOILC, COR) = AEROSOL(LSOILC,COR) * (1 - EXPWET) * CFACTOR !* WFACTOR	
!	AERWDEP(LSEASC, COR) = AEROSOL(LSEASC,COR) * (1 - EXPWET) * CFACTOR !* WFACTOR	
!	AERWDEP(LANTHC, COR) = AEROSOL(LANTHC,COR) * (1 - EXPWET) * CFACTOR !* WFACTOR	
!* WFACTOR
        aerwdep(lso4, cor) = aerosol(lso4, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lnh4, cor) = aerosol(lnh4, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lno3, cor) = aerosol(lno3, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lcl, cor) = aerosol(lcl, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lpricor, cor) = aerosol(lpricor, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lna, cor) = aerosol(lna, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(la3fe, cor) = aerosol(la3fe, cor)*(1-expwet)*cfactor
!* WFACTOR			
        aerwdep(lb2mn, cor) = aerosol(lb2mn, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lcaco3, cor) = aerosol(lcaco3, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lmgco3, cor) = aerosol(lmgco3, cor)*(1-expwet)*cfactor
!* WFACTOR
        aerwdep(lk, cor) = aerosol(lk, cor)*(1-expwet)*cfactor
!       WRITE(6,*) CHECK THAT THIS MATCHES WITH DYNAMIC SPECIES!!!	
!    AEROSOL SPECIES, COR
        CALL PUSHREAL8(aerosol(lnum, cor))
        aerosol(lnum, cor) = aerosol(lnum, cor)*expwet
!	AEROSOL(LSOILC,COR) = AEROSOL(LSOILC,COR) * EXPWET
!	AEROSOL(LSEASC,COR) = AEROSOL(LSEASC,COR) * EXPWET
!	AEROSOL(LANTHC,COR) = AEROSOL(LANTHC,COR) * EXPWET
        CALL PUSHREAL8(aerosol(lso4, cor))
        aerosol(lso4, cor) = aerosol(lso4, cor)*expwet
        CALL PUSHREAL8(aerosol(lnh4, cor))
        aerosol(lnh4, cor) = aerosol(lnh4, cor)*expwet
        CALL PUSHREAL8(aerosol(lno3, cor))
        aerosol(lno3, cor) = aerosol(lno3, cor)*expwet
        CALL PUSHREAL8(aerosol(lcl, cor))
        aerosol(lcl, cor) = aerosol(lcl, cor)*expwet
        CALL PUSHREAL8(aerosol(lpricor, cor))
        aerosol(lpricor, cor) = aerosol(lpricor, cor)*expwet
        CALL PUSHREAL8(aerosol(lna, cor))
        aerosol(lna, cor) = aerosol(lna, cor)*expwet
        CALL PUSHREAL8(aerosol(la3fe, cor))
        aerosol(la3fe, cor) = aerosol(la3fe, cor)*expwet
        CALL PUSHREAL8(aerosol(lb2mn, cor))
        aerosol(lb2mn, cor) = aerosol(lb2mn, cor)*expwet
        CALL PUSHREAL8(aerosol(lcaco3, cor))
        aerosol(lcaco3, cor) = aerosol(lcaco3, cor)*expwet
        CALL PUSHREAL8(aerosol(lmgco3, cor))
        aerosol(lmgco3, cor) = aerosol(lmgco3, cor)*expwet
        CALL PUSHREAL8(aerosol(lk, cor))
        aerosol(lk, cor) = aerosol(lk, cor)*expwet
        DO i=1,naer
          IF (aerosol(i, cor) .LT. 1d-30) THEN
            CALL PUSHREAL8(aerosol(i, cor))
            aerosol(i, cor) = 0.d0
            CALL PUSHCONTROL1B(1)
          ELSE
            CALL PUSHCONTROL1B(0)
          END IF
        END DO
!    AERWDEP, ACC	
!* WFACTOR
!slz        aerwdep(lsoa, acc) = aerosol(lsoa, acc)*(1-expwet)*cfactor
        IF (var(ind_wd_h2so4) - aerwdep(lso4, cor) .LT. 0.d0) THEN
          aerwdep(lso4, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp = var(ind_wd_h2so4) - aerwdep(lso4, cor)
          aerwdep(lso4, acc) = tmp
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_wd_nh4plus) - aerwdep(lnh4, cor) .LT. 0.d0) THEN
          aerwdep(lnh4, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp0 = var(ind_wd_nh4plus) - aerwdep(lnh4, cor)
          aerwdep(lnh4, acc) = tmp0
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_wd_no3min) - aerwdep(lno3, cor) .LT. 0.d0) THEN
          aerwdep(lno3, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp1 = var(ind_wd_no3min) - aerwdep(lno3, cor)
          aerwdep(lno3, acc) = tmp1
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_wd_clmin) - aerwdep(lcl, cor) .LT. 0.d0) THEN
          aerwdep(lcl, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp2 = var(ind_wd_clmin) - aerwdep(lcl, cor)
          aerwdep(lcl, acc) = tmp2
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_wd_naplus) - aerwdep(lna, cor) .LT. 0.d0) THEN
          aerwdep(lna, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp3 = var(ind_wd_naplus) - aerwdep(lna, cor)
          aerwdep(lna, acc) = tmp3
          CALL PUSHCONTROL1B(1)
        END IF
        aerwdep(lpri, acc) = var(ind_wd_priacc)
        aerwdep(lec, acc) = var(ind_wd_pecacc)
        aerwdep(lorgc, acc) = var(ind_wd_orgc)
!slz        aerwdep(lpoa, acc) = var(ind_wd_poaacc)
!  FOR VOLATILE SPECIES IN THE COARSE MODE
        IF (aerwdep(lnh4, cor) .GT. var(ind_wd_nh4plus)) THEN
          aerwdep(lnh4, cor) = (1.d0-fnh4acc)*var(ind_wd_nh4plus)
          aerwdep(lnh4, acc) = fnh4acc*var(ind_wd_nh4plus)
          CALL PUSHREAL8(aerosol(lnh4, cor))
          aerosol(lnh4, cor) = (1.d0-fnh4acc)*(var(ind_l_nh4oh)+var(
     +     ind_l_nh4plus))*invcfac
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
        END IF
        IF (aerwdep(lno3, cor) .GT. var(ind_wd_no3min)) THEN
          aerwdep(lno3, cor) = (1.d0-fno3acc)*var(ind_wd_no3min)
          aerwdep(lno3, acc) = fno3acc*var(ind_wd_no3min)
          CALL PUSHREAL8(aerosol(lno3, cor))
          aerosol(lno3, cor) = (1.d0-fno3acc)*(var(ind_l_hno3)+var(
     +     ind_l_no3min))*invcfac
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
        END IF
        IF (aerwdep(lcl, cor) .GT. var(ind_wd_clmin)) THEN
          aerwdep(lcl, cor) = (1.d0-fclacc)*var(ind_wd_clmin)
          aerwdep(lcl, acc) = fclacc*var(ind_wd_clmin)
          CALL PUSHREAL8(aerosol(lcl, cor))
          aerosol(lcl, cor) = (1.d0-fclacc)*var(ind_l_clmin)*invcfac
          CALL PUSHCONTROL1B(1)
        ELSE
          CALL PUSHCONTROL1B(0)
        END IF
!    AEROSOL SPECIES, ACC
        CALL PUSHREAL8(aerosol(lpri, acc))
        aerosol(lpri, acc) = var(ind_l_priacc)*invcfac
        CALL PUSHREAL8(aerosol(lec, acc))
        aerosol(lec, acc) = var(ind_l_pecacc)*invcfac
        CALL PUSHREAL8(aerosol(lorgc, acc))
        aerosol(lorgc, acc) = var(ind_l_orgc)*invcfac
!slz        CALL PUSHREAL8(aerosol(lpoa, acc))
!slz        aerosol(lpoa, acc) = var(ind_l_poaacc)*invcfac
!slz        CALL PUSHREAL8(aerosol(lsoa, acc))
!slz        aerosol(lsoa, acc) = aerosol(lsoa, acc)*expwet
        IF ((var(ind_l_h2so4)+var(ind_l_so4min2)+var(ind_l_hso4min))*invcfac -
     +     aerosol(lso4, cor) .LT. 0.d0) THEN
          CALL PUSHREAL8(aerosol(lso4, acc))
          aerosol(lso4, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp4 = (var(ind_l_h2so4)+var(ind_l_so4min2)+var(ind_l_hso4min))*
     +     invcfac - aerosol(lso4, cor)
          CALL PUSHREAL8(aerosol(lso4, acc))
          aerosol(lso4, acc) = tmp4
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_l_clmin)*invcfac - aerosol(lcl, cor) .LT. 0.d0) THEN
          CALL PUSHREAL8(aerosol(lcl, acc))
          aerosol(lcl, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp5 = var(ind_l_clmin)*invcfac - aerosol(lcl, cor)
          CALL PUSHREAL8(aerosol(lcl, acc))
          aerosol(lcl, acc) = tmp5
          CALL PUSHCONTROL1B(1)
        END IF
        IF (var(ind_l_naplus)*invcfac - aerosol(lna, cor) .LT. 0.d0) THEN
          CALL PUSHREAL8(aerosol(lna, acc))
          aerosol(lna, acc) = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          tmp6 = var(ind_l_naplus)*invcfac - aerosol(lna, cor)
          CALL PUSHREAL8(aerosol(lna, acc))
          aerosol(lna, acc) = tmp6
          CALL PUSHCONTROL1B(1)
        END IF
        totamm = var(ind_g_nh3) + var(ind_l_nh4oh) + var(ind_l_nh4plus) -
     +   aerosol(lnh4, cor)*cfactor
        CALL PUSHREAL8(totnit)
        totnit = var(ind_g_hno3) + var(ind_l_hno3) + var(ind_l_no3min) -
     +   aerosol(lno3, cor)*cfactor
        IF (totamm .LT. 0.d0) THEN
          totamm = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
          totamm = totamm
        END IF
        IF (totnit .LT. 0.d0) THEN
          totnit = 0.d0
          CALL PUSHCONTROL1B(0)
        ELSE
          CALL PUSHCONTROL1B(1)
          totnit = totnit
        END IF
!      AEROSOL(LNO3,ACC) = (FNO3ACC*TOTNIT) * INVCFAC
!       AEROSOL(LNH4,ACC) = (FNH4ACC*TOTAMM) * INVCFAC
        CALL PUSHREAL8(aerosol(lno3, acc))
        aerosol(lno3, acc) = (1.d0-fhno3)*totnit*invcfac
        CALL PUSHREAL8(aerosol(lnh4, acc))
        aerosol(lnh4, acc) = (1.d0-fnh3)*totamm*invcfac
!       AEROSOL(LNUM, ACC) = AEROSOL(LNUM, ACC) * EXPWET
!    GAS PHASE SPECIES
        CALL PUSHREAL8(gas(lso2))
        gas(lso2) = (var(ind_g_so2)+var(ind_l_so2)+var(ind_l_hso3min)+var(
     +   ind_l_so3min2))*invcfac
        CALL PUSHREAL8(gas(ln2o5))
        gas(ln2o5) = 0.d0
        CALL PUSHREAL8(gas(lco2))
        gas(lco2) = (var(ind_g_co2)+var(ind_l_h2co3)+var(ind_l_hco3min)+var(
     +   ind_l_co3min2))*invcfac
        CALL PUSHREAL8(gas(lh2o2))
        gas(lh2o2) = (var(ind_g_h2o2)+var(ind_l_h2o2))*invcfac
        CALL PUSHREAL8(gas(lo3))
        gas(lo3) = (var(ind_g_o3)+var(ind_l_o3))*invcfac
        CALL PUSHREAL8(gas(lfoa))
        gas(lfoa) = (var(ind_g_hcooh)+var(ind_l_hcooh)+var(ind_l_hcoomin))*
     +   invcfac
        CALL PUSHREAL8(gas(lmhp))
        gas(lmhp) = (var(ind_g_mhp)+var(ind_l_mhp))*invcfac
        CALL PUSHREAL8(gas(lpaa))
        gas(lpaa) = (var(ind_g_paa)+var(ind_l_paa))*invcfac
        CALL PUSHREAL8(gas(lh2so4))
        gas(lh2so4) = 0.d0
! for now, just putting non"ionized" back into gas
        CALL PUSHREAL8(gas(lhcl))
        gas(lhcl) = (var(ind_g_hcl)+var(ind_l_hcl))*invcfac
        CALL PUSHREAL8(gas(lgly))
        gas(lgly) = (var(ind_g_gly)+var(ind_l_gly))*invcfac
        CALL PUSHREAL8(gas(lmgly))
        gas(lmgly) = (var(ind_g_mgly)+var(ind_l_mgly))*invcfac
!        GAS(LHO) = (VAR(ind_G_HO) + VAR(ind_L_HO))*INVCFAC	
        CALL PUSHREAL8(gas(lhno3))
        gas(lhno3) = fhno3*totnit*invcfac
        CALL PUSHREAL8(gas(lnh3))
        gas(lnh3) = fnh3*totamm*invcfac
!    GASWDEP
! already transferred to HNO3
! already transferred to SO4
        DO j=1,nmodes
          DO i=1,naer
            aerwdep(i, j) = aerwdep(i, j)*wfactor
          END DO
        END DO
        DO i=1,ngas
          IF (gas(i) .LT. 0.d0) THEN
            CALL PUSHCONTROL1B(0)
          ELSE
            CALL PUSHCONTROL1B(1)
          END IF
        END DO
        DO j=1,nmodes
          DO i=1,naer
            IF (aerosol(i, j) .LT. 0.d0) THEN
              CALL PUSHREAL8(aerosol(i, j))
              aerosol(i, j) = 0.d0
              CALL PUSHCONTROL1B(0)
            ELSE
              CALL PUSHCONTROL1B(1)
            END IF
            IF (aerwdep(i, j) .LT. 0.d0) THEN
              aerwdep(i, j) = 0.d0
              CALL PUSHCONTROL1B(1)
            ELSE
              CALL PUSHCONTROL1B(0)
            END IF
          END DO
        END DO
!...store the amount of hydrogen deposition
        depsum = aerwdep(lso4, acc)/wfactor
        IF (aerosol(lso4, acc)*cfactor + depsum .NE. 0.d0) THEN
          betaso4 = depsum/(aerosol(lso4, acc)*cfactor+depsum)/taucld
          CALL PUSHCONTROL1B(0)
        ELSE
          betaso4 = 0.d0
          CALL PUSHCONTROL1B(1)
        END IF
        betaso4b = betaso4b - EXP(-(taucld*betaso4))*aerosol(lnum, acc)*taucld
     +   *aerosolb(lnum, acc)
        aerosolb(lnum, acc) = EXP(-(taucld*betaso4))*aerosolb(lnum, acc)
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          temp4 = taucld*(cfactor*aerosol(lso4, acc)+depsum)
          tempb8 = -(depsum*taucld*betaso4b/temp4**2)
          depsumb = tempb8 + betaso4b/temp4
          aerosolb(lso4, acc) = aerosolb(lso4, acc) + cfactor*tempb8
        ELSE
          depsumb = 0.0_8
        END IF
        aerwdepb = 0.0_8
        aerwdepb(lso4, acc) = aerwdepb(lso4, acc) + depsumb/wfactor
        DO j=nmodes,1,-1
          DO i=naer,1,-1
            CALL POPCONTROL1B(branch)
            IF (branch .NE. 0) aerwdepb(i, j) = 0.0_8
            CALL POPCONTROL1B(branch)
            IF (branch .EQ. 0) THEN
              CALL POPREAL8(aerosol(i, j))
              aerosolb(i, j) = 0.0_8
            END IF
          END DO
        END DO
        DO i=ngas,1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .EQ. 0) gasb(i) = 0.0_8
        END DO
        DO j=nmodes,1,-1
          DO i=naer,1,-1
            aerwdepb(i, j) = wfactor*aerwdepb(i, j)
          END DO
        END DO
        CALL POPREAL8(gas(lnh3))
        fnh3b = invcfac*totamm*gasb(lnh3) - totamm*invcfac*aerosolb(lnh4, acc)
        totammb = invcfac*(1.d0-fnh3)*aerosolb(lnh4, acc) + invcfac*fnh3*gasb(
     +   lnh3)
        gasb(lnh3) = 0.0_8
        CALL POPREAL8(gas(lhno3))
        varb = 0.0
        CALL POPREAL8(gas(lmgly))
        CALL POPREAL8(gas(lgly))
        CALL POPREAL8(gas(lhcl))
        CALL POPREAL8(gas(lh2so4))
        CALL POPREAL8(gas(lpaa))
        CALL POPREAL8(gas(lmhp))
        CALL POPREAL8(gas(lfoa))
        CALL POPREAL8(gas(lo3))
        CALL POPREAL8(gas(lh2o2))
        CALL POPREAL8(gas(lco2))
        CALL POPREAL8(gas(ln2o5))
        CALL POPREAL8(gas(lso2))
        CALL POPREAL8(aerosol(lnh4, acc))
        aerosolb(lnh4, acc) = 0.0_8
        fhno3b = invcfac*totnit*gasb(lhno3) - totnit*invcfac*aerosolb(lno3,
     +   acc)
        totnitb = invcfac*(1.d0-fhno3)*aerosolb(lno3, acc) + invcfac*fhno3*
     +   gasb(lhno3)
        gasb(lhno3) = 0.0_8
        varb(ind_g_mgly) = varb(ind_g_mgly) + invcfac*gasb(lmgly)
        varb(ind_l_mgly) = varb(ind_l_mgly) + invcfac*gasb(lmgly)
        gasb(lmgly) = 0.0_8
        varb(ind_g_gly) = varb(ind_g_gly) + invcfac*gasb(lgly)
        varb(ind_l_gly) = varb(ind_l_gly) + invcfac*gasb(lgly)
        gasb(lgly) = 0.0_8
        varb(ind_g_hcl) = varb(ind_g_hcl) + invcfac*gasb(lhcl)
        varb(ind_l_hcl) = varb(ind_l_hcl) + invcfac*gasb(lhcl)
        gasb(lhcl) = 0.0_8
        gasb(lh2so4) = 0.0_8
        varb(ind_g_paa) = varb(ind_g_paa) + invcfac*gasb(lpaa)
        varb(ind_l_paa) = varb(ind_l_paa) + invcfac*gasb(lpaa)
        gasb(lpaa) = 0.0_8
        varb(ind_g_mhp) = varb(ind_g_mhp) + invcfac*gasb(lmhp)
        varb(ind_l_mhp) = varb(ind_l_mhp) + invcfac*gasb(lmhp)
        gasb(lmhp) = 0.0_8
        tempb5 = invcfac*gasb(lfoa)
        varb(ind_g_hcooh) = varb(ind_g_hcooh) + tempb5
        varb(ind_l_hcooh) = varb(ind_l_hcooh) + tempb5
        varb(ind_l_hcoomin) = varb(ind_l_hcoomin) + tempb5
        gasb(lfoa) = 0.0_8
        varb(ind_g_o3) = varb(ind_g_o3) + invcfac*gasb(lo3)
        varb(ind_l_o3) = varb(ind_l_o3) + invcfac*gasb(lo3)
        gasb(lo3) = 0.0_8
        varb(ind_g_h2o2) = varb(ind_g_h2o2) + invcfac*gasb(lh2o2)
        varb(ind_l_h2o2) = varb(ind_l_h2o2) + invcfac*gasb(lh2o2)
        gasb(lh2o2) = 0.0_8
        tempb6 = invcfac*gasb(lco2)
        varb(ind_g_co2) = varb(ind_g_co2) + tempb6
        varb(ind_l_h2co3) = varb(ind_l_h2co3) + tempb6
        varb(ind_l_hco3min) = varb(ind_l_hco3min) + tempb6
        varb(ind_l_co3min2) = varb(ind_l_co3min2) + tempb6
        gasb(lco2) = 0.0_8
        gasb(ln2o5) = 0.0_8
        tempb7 = invcfac*gasb(lso2)
        varb(ind_g_so2) = varb(ind_g_so2) + tempb7
        varb(ind_l_so2) = varb(ind_l_so2) + tempb7
        varb(ind_l_hso3min) = varb(ind_l_hso3min) + tempb7
        varb(ind_l_so3min2) = varb(ind_l_so3min2) + tempb7
        gasb(lso2) = 0.0_8
        CALL POPREAL8(aerosol(lno3, acc))
        aerosolb(lno3, acc) = 0.0_8
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) totnitb = 0.0_8
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) totammb = 0.0_8
        CALL POPREAL8(totnit)
        varb(ind_g_hno3) = varb(ind_g_hno3) + totnitb
        varb(ind_l_hno3) = varb(ind_l_hno3) + totnitb
        varb(ind_l_no3min) = varb(ind_l_no3min) + totnitb
        aerosolb(lno3, cor) = aerosolb(lno3, cor) - cfactor*totnitb
        varb(ind_g_nh3) = varb(ind_g_nh3) + totammb
        varb(ind_l_nh4oh) = varb(ind_l_nh4oh) + totammb
        varb(ind_l_nh4plus) = varb(ind_l_nh4plus) + totammb
        aerosolb(lnh4, cor) = aerosolb(lnh4, cor) - cfactor*totammb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aerosol(lna, acc))
          aerosolb(lna, acc) = 0.0_8
        ELSE
          CALL POPREAL8(aerosol(lna, acc))
          tmpb6 = aerosolb(lna, acc)
          aerosolb(lna, acc) = 0.0_8
          varb(ind_l_naplus) = varb(ind_l_naplus) + invcfac*tmpb6
          aerosolb(lna, cor) = aerosolb(lna, cor) - tmpb6
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aerosol(lcl, acc))
          aerosolb(lcl, acc) = 0.0_8
        ELSE
          CALL POPREAL8(aerosol(lcl, acc))
          tmpb5 = aerosolb(lcl, acc)
          aerosolb(lcl, acc) = 0.0_8
          varb(ind_l_clmin) = varb(ind_l_clmin) + invcfac*tmpb5
          aerosolb(lcl, cor) = aerosolb(lcl, cor) - tmpb5
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aerosol(lso4, acc))
          aerosolb(lso4, acc) = 0.0_8
        ELSE
          CALL POPREAL8(aerosol(lso4, acc))
          tmpb4 = aerosolb(lso4, acc)
          aerosolb(lso4, acc) = 0.0_8
          tempb4 = invcfac*tmpb4
          varb(ind_l_h2so4) = varb(ind_l_h2so4) + tempb4
          varb(ind_l_so4min2) = varb(ind_l_so4min2) + tempb4
          varb(ind_l_hso4min) = varb(ind_l_hso4min) + tempb4
          aerosolb(lso4, cor) = aerosolb(lso4, cor) - tmpb4
        END IF
!slz        CALL POPREAL8(aerosol(lsoa, acc))
!slz        aerosolb(lsoa, acc) = expwet*aerosolb(lsoa, acc)
!slz        CALL POPREAL8(aerosol(lpoa, acc))
!slz        varb(ind_l_poaacc) = varb(ind_l_poaacc) + invcfac*aerosolb(lpoa, acc)
!slz        aerosolb(lpoa, acc) = 0.0_8
        CALL POPREAL8(aerosol(lorgc, acc))
        varb(ind_l_orgc) = varb(ind_l_orgc) + invcfac*aerosolb(lorgc, acc)
        aerosolb(lorgc, acc) = 0.0_8
        CALL POPREAL8(aerosol(lec, acc))
        varb(ind_l_pecacc) = varb(ind_l_pecacc) + invcfac*aerosolb(lec, acc)
        aerosolb(lec, acc) = 0.0_8
        CALL POPREAL8(aerosol(lpri, acc))
        varb(ind_l_priacc) = varb(ind_l_priacc) + invcfac*aerosolb(lpri, acc)
        aerosolb(lpri, acc) = 0.0_8
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          fclaccb = 0.0_8
        ELSE
          CALL POPREAL8(aerosol(lcl, cor))
          fclaccb = var(ind_wd_clmin)*aerwdepb(lcl, acc) - var(ind_l_clmin)*
     +     invcfac*aerosolb(lcl, cor)
          varb(ind_l_clmin) = varb(ind_l_clmin) + invcfac*(1.d0-fclacc)*
     +     aerosolb(lcl, cor)
          aerosolb(lcl, cor) = 0.0_8
          varb(ind_wd_clmin) = varb(ind_wd_clmin) + fclacc*aerwdepb(lcl, acc)
          aerwdepb(lcl, acc) = 0.0_8
          fclaccb = fclaccb - var(ind_wd_clmin)*aerwdepb(lcl, cor)
          varb(ind_wd_clmin) = varb(ind_wd_clmin) + (1.d0-fclacc)*aerwdepb(lcl
     +     , cor)
          aerwdepb(lcl, cor) = 0.0_8
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aerosol(lno3, cor))
          tempb3 = invcfac*(1.d0-fno3acc)*aerosolb(lno3, cor)
          fno3accb = var(ind_wd_no3min)*aerwdepb(lno3, acc) - (var(ind_l_hno3)
     +     +var(ind_l_no3min))*invcfac*aerosolb(lno3, cor)
          varb(ind_l_hno3) = varb(ind_l_hno3) + tempb3
          varb(ind_l_no3min) = varb(ind_l_no3min) + tempb3
          aerosolb(lno3, cor) = 0.0_8
          varb(ind_wd_no3min) = varb(ind_wd_no3min) + fno3acc*aerwdepb(lno3,
     +     acc)
          aerwdepb(lno3, acc) = 0.0_8
          fno3accb = fno3accb - var(ind_wd_no3min)*aerwdepb(lno3, cor)
          varb(ind_wd_no3min) = varb(ind_wd_no3min) + (1.d0-fno3acc)*aerwdepb(
     +     lno3, cor)
          aerwdepb(lno3, cor) = 0.0_8
        ELSE
          fno3accb = 0.0_8
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          CALL POPREAL8(aerosol(lnh4, cor))
          tempb2 = invcfac*(1.d0-fnh4acc)*aerosolb(lnh4, cor)
          fnh4accb = var(ind_wd_nh4plus)*aerwdepb(lnh4, acc) - (var(
     +     ind_l_nh4oh)+var(ind_l_nh4plus))*invcfac*aerosolb(lnh4, cor)
          varb(ind_l_nh4oh) = varb(ind_l_nh4oh) + tempb2
          varb(ind_l_nh4plus) = varb(ind_l_nh4plus) + tempb2
          aerosolb(lnh4, cor) = 0.0_8
          varb(ind_wd_nh4plus) = varb(ind_wd_nh4plus) + fnh4acc*aerwdepb(lnh4
     +     , acc)
          aerwdepb(lnh4, acc) = 0.0_8
          fnh4accb = fnh4accb - var(ind_wd_nh4plus)*aerwdepb(lnh4, cor)
          varb(ind_wd_nh4plus) = varb(ind_wd_nh4plus) + (1.d0-fnh4acc)*
     +     aerwdepb(lnh4, cor)
          aerwdepb(lnh4, cor) = 0.0_8
        ELSE
          fnh4accb = 0.0_8
        END IF
!slz        varb(ind_wd_poaacc) = varb(ind_wd_poaacc) + aerwdepb(lpoa, acc)
!slz        aerwdepb(lpoa, acc) = 0.0_8
        varb(ind_wd_orgc) = varb(ind_wd_orgc) + aerwdepb(lorgc, acc)
        aerwdepb(lorgc, acc) = 0.0_8
        varb(ind_wd_pecacc) = varb(ind_wd_pecacc) + aerwdepb(lec, acc)
        aerwdepb(lec, acc) = 0.0_8
        varb(ind_wd_priacc) = varb(ind_wd_priacc) + aerwdepb(lpri, acc)
        aerwdepb(lpri, acc) = 0.0_8
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          aerwdepb(lna, acc) = 0.0_8
        ELSE
          tmpb3 = aerwdepb(lna, acc)
          aerwdepb(lna, acc) = 0.0_8
          varb(ind_wd_naplus) = varb(ind_wd_naplus) + tmpb3
          aerwdepb(lna, cor) = aerwdepb(lna, cor) - tmpb3
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          aerwdepb(lcl, acc) = 0.0_8
        ELSE
          tmpb2 = aerwdepb(lcl, acc)
          aerwdepb(lcl, acc) = 0.0_8
          varb(ind_wd_clmin) = varb(ind_wd_clmin) + tmpb2
          aerwdepb(lcl, cor) = aerwdepb(lcl, cor) - tmpb2
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          aerwdepb(lno3, acc) = 0.0_8
        ELSE
          tmpb1 = aerwdepb(lno3, acc)
          aerwdepb(lno3, acc) = 0.0_8
          varb(ind_wd_no3min) = varb(ind_wd_no3min) + tmpb1
          aerwdepb(lno3, cor) = aerwdepb(lno3, cor) - tmpb1
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          aerwdepb(lnh4, acc) = 0.0_8
        ELSE
          tmpb0 = aerwdepb(lnh4, acc)
          aerwdepb(lnh4, acc) = 0.0_8
          varb(ind_wd_nh4plus) = varb(ind_wd_nh4plus) + tmpb0
          aerwdepb(lnh4, cor) = aerwdepb(lnh4, cor) - tmpb0
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          aerwdepb(lso4, acc) = 0.0_8
        ELSE
          tmpb = aerwdepb(lso4, acc)
          aerwdepb(lso4, acc) = 0.0_8
          varb(ind_wd_h2so4) = varb(ind_wd_h2so4) + tmpb
          aerwdepb(lso4, cor) = aerwdepb(lso4, cor) - tmpb
        END IF
!slz        aerosolb(lsoa, acc) = aerosolb(lsoa, acc) + (1-expwet)*cfactor*
!slz     +   aerwdepb(lsoa, acc)
!slz        aerwdepb(lsoa, acc) = 0.0_8
        DO i=naer,1,-1
          CALL POPCONTROL1B(branch)
          IF (branch .NE. 0) THEN
            CALL POPREAL8(aerosol(i, cor))
            aerosolb(i, cor) = 0.0_8
          END IF
        END DO
        CALL POPREAL8(aerosol(lk, cor))
        aerosolb(lk, cor) = expwet*aerosolb(lk, cor)
        CALL POPREAL8(aerosol(lmgco3, cor))
        aerosolb(lmgco3, cor) = expwet*aerosolb(lmgco3, cor)
        CALL POPREAL8(aerosol(lcaco3, cor))
        aerosolb(lcaco3, cor) = expwet*aerosolb(lcaco3, cor)
        CALL POPREAL8(aerosol(lb2mn, cor))
        aerosolb(lb2mn, cor) = expwet*aerosolb(lb2mn, cor)
        CALL POPREAL8(aerosol(la3fe, cor))
        aerosolb(la3fe, cor) = expwet*aerosolb(la3fe, cor)
        CALL POPREAL8(aerosol(lna, cor))
        aerosolb(lna, cor) = expwet*aerosolb(lna, cor)
        CALL POPREAL8(aerosol(lpricor, cor))
        aerosolb(lpricor, cor) = expwet*aerosolb(lpricor, cor)
        CALL POPREAL8(aerosol(lcl, cor))
        aerosolb(lcl, cor) = expwet*aerosolb(lcl, cor)
        CALL POPREAL8(aerosol(lno3, cor))
        aerosolb(lno3, cor) = expwet*aerosolb(lno3, cor)
        CALL POPREAL8(aerosol(lnh4, cor))
        aerosolb(lnh4, cor) = expwet*aerosolb(lnh4, cor)
        CALL POPREAL8(aerosol(lso4, cor))
        aerosolb(lso4, cor) = expwet*aerosolb(lso4, cor)
        CALL POPREAL8(aerosol(lnum, cor))
        aerosolb(lnum, cor) = expwet*aerosolb(lnum, cor)
        aerosolb(lk, cor) = aerosolb(lk, cor) + (1-expwet)*cfactor*aerwdepb(lk
     +   , cor)
        aerwdepb(lk, cor) = 0.0_8
        aerosolb(lmgco3, cor) = aerosolb(lmgco3, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lmgco3, cor)
        aerwdepb(lmgco3, cor) = 0.0_8
        aerosolb(lcaco3, cor) = aerosolb(lcaco3, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lcaco3, cor)
        aerwdepb(lcaco3, cor) = 0.0_8
        aerosolb(lb2mn, cor) = aerosolb(lb2mn, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lb2mn, cor)
        aerwdepb(lb2mn, cor) = 0.0_8
        aerosolb(la3fe, cor) = aerosolb(la3fe, cor) + (1-expwet)*cfactor*
     +   aerwdepb(la3fe, cor)
        aerwdepb(la3fe, cor) = 0.0_8
        aerosolb(lna, cor) = aerosolb(lna, cor) + (1-expwet)*cfactor*aerwdepb(
     +   lna, cor)
        aerwdepb(lna, cor) = 0.0_8
        aerosolb(lpricor, cor) = aerosolb(lpricor, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lpricor, cor)
        aerwdepb(lpricor, cor) = 0.0_8
        aerosolb(lcl, cor) = aerosolb(lcl, cor) + (1-expwet)*cfactor*aerwdepb(
     +   lcl, cor)
        aerwdepb(lcl, cor) = 0.0_8
        aerosolb(lno3, cor) = aerosolb(lno3, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lno3, cor)
        aerwdepb(lno3, cor) = 0.0_8
        aerosolb(lnh4, cor) = aerosolb(lnh4, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lnh4, cor)
        aerwdepb(lnh4, cor) = 0.0_8
        aerosolb(lso4, cor) = aerosolb(lso4, cor) + (1-expwet)*cfactor*
     +   aerwdepb(lso4, cor)
        CALL POPREAL8(aerosol(lnum, akn))
        alfa0b = -(EXP(-(taucld*alfa0))*aerosol(lnum, akn)*taucld*aerosolb(
     +   lnum, akn))
        aerosolb(lnum, akn) = EXP(-(taucld*alfa0))*aerosolb(lnum, akn)
        CALL POPREAL8(aerosol(lpri, akn))
        varb(ind_a_priakn) = varb(ind_a_priakn) + invcfac*aerosolb(lpri, akn)
        aerosolb(lpri, akn) = 0.0_8
!slz        CALL POPREAL8(aerosol(lpoa, akn))
!slz        varb(ind_a_poaakn) = varb(ind_a_poaakn) + invcfac*aerosolb(lpoa, akn)
!slz        aerosolb(lpoa, akn) = 0.0_8
        CALL POPREAL8(aerosol(lec, akn))
        varb(ind_a_pecakn) = varb(ind_a_pecakn) + invcfac*aerosolb(lec, akn)
        aerosolb(lec, akn) = 0.0_8
        CALL POPREAL8(aerosol(lso4, akn))
        varb(ind_a_so4akn) = varb(ind_a_so4akn) + invcfac*aerosolb(lso4, akn)
        aerosolb(lso4, akn) = 0.0_8
        CALL POPREAL8(aerosol(lna, akn))
        varb(ind_a_naakn) = varb(ind_a_naakn) + invcfac*aerosolb(lna, akn)
        aerosolb(lna, akn) = 0.0_8
        CALL POPREAL8(aerosol(lcl, akn))
        varb(ind_a_clakn) = varb(ind_a_clakn) + invcfac*aerosolb(lcl, akn)
        aerosolb(lcl, akn) = 0.0_8
        CALL POPREAL8(aerosol(lnh4, akn))
        varb(ind_a_nh4akn) = varb(ind_a_nh4akn) + invcfac*aerosolb(lnh4, akn)
        aerosolb(lnh4, akn) = 0.0_8
        CALL POPREAL8(aerosol(lno3, akn))
        varb(ind_a_no3akn) = varb(ind_a_no3akn) + invcfac*aerosolb(lno3, akn)
        aerosolb(lno3, akn) = 0.0_8
!slz        ab = 0.0
!slz        CALL POPINTEGER4(ad_count)
!slz        DO i0=1,ad_count
!slz          CALL POPREAL4ARRAY(t, dp/4)
          CALL POPREAL4ARRAY(var, dp*nvar/4)
!slz          CALL POPREAL4ARRAY(time, dp/4)
!slz          CALL POPREAL4ARRAY(rconst, dp*nreact/4)
!slz          CALL POPREAL4ARRAY(a, dp*nreact/4)
!slz
!slz
!slz          CALL INTEGRATE_B(tin=t, tout=arg1, icntrl_u=(/
!slz     +              1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
!slz     +              0/), rstatus_u=rstate)

!slz atol and rtol are given in initialize()
      DO i=1,NVAR
        RTOL_adj(i) = 1.0d-4 !slz in default main: rtol = 1.d-4; atol=1.d-3
        ATOL_adj(i) = 1.0d-3 !slz    rtol_adj=1.d-4; atol_adj=1.d-10
      END DO

      t = tstart
      CALL INTEGRATE_ADJ( NADJ, VAR, varb, T, TEND,
     +                    ATOL_adj, RTOL_adj,
     +                    ICNTRL_u=(/1,0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0/))

!slz          CALL POPREAL4ARRAY(arg1, dp/4)
!slz          CALL UPDATE_RCONST_B()
!slz        END DO
        CALL POPREAL4ARRAY(var, dp*nvar/4)
        CALL INITIALIZE_B(temp2, pres_pa, taucld, prcrate, wcavg, wtavg, airm
     +             , alfa0, alfa3, alfa3b, gas, gasb, aerosol, aerosolb,
     +             cthk1, varb)
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          temp3 = aerosol(lcl, acc) + aerosol(lcl, cor)
          tempb1 = -(aerosol(lcl, acc)*fclaccb/temp3**2)
          aerosolb(lcl, acc) = aerosolb(lcl, acc) + tempb1 + fclaccb/temp3
          aerosolb(lcl, cor) = aerosolb(lcl, cor) + tempb1
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          temp1 = aerosol(lnh4, acc) + aerosol(lnh4, cor)
          tempb0 = -(aerosol(lnh4, acc)*fnh4accb/temp1**2)
          aerosolb(lnh4, acc) = aerosolb(lnh4, acc) + tempb0 + fnh4accb/temp1
          aerosolb(lnh4, cor) = aerosolb(lnh4, cor) + tempb0
        ELSE
          fnh4accb = 0.0_8
        END IF
        totamm = gas(lnh3) + aerosol(lnh4, acc)
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          gasb(lnh3) = gasb(lnh3) + fnh3b/totamm
          totammb = -(gas(lnh3)*fnh3b/totamm**2)
        ELSE
          totammb = 0.0_8
        END IF
        gasb(lnh3) = gasb(lnh3) + totammb
        aerosolb(lnh4, acc) = aerosolb(lnh4, acc) + totammb
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          temp0 = aerosol(lno3, acc) + aerosol(lno3, cor)
          tempb = -(aerosol(lno3, acc)*fno3accb/temp0**2)
          aerosolb(lno3, acc) = aerosolb(lno3, acc) + tempb + fno3accb/temp0
          aerosolb(lno3, cor) = aerosolb(lno3, cor) + tempb
        END IF
        CALL POPCONTROL1B(branch)
        IF (branch .EQ. 0) THEN
          gasb(lhno3) = gasb(lhno3) + fhno3b/totnit
          totnitb = -(gas(lhno3)*fhno3b/totnit**2)
        ELSE
          totnitb = 0.0_8
        END IF
        gasb(lhno3) = gasb(lhno3) + totnitb
        aerosolb(lno3, acc) = aerosolb(lno3, acc) + totnitb
        betaso4b = 0.0_8
      END SUBROUTINE AQCHEM_B
