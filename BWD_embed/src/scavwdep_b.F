!        Generated by TAPENADE     (INRIA, Tropics team)
!  Tapenade 3.4 (r3376) - 10 Feb 2010 17:51
!
!  Differentiation of scavwdep in reverse (adjoint) mode:
!   gradient     of useful results: polc alfa0 alfa2 alfa3 cend
!   with respect to varying inputs: hplus cgrid_scav_fac polc alfa0
!                alfa2 alfa3 cend
!
!***********************************************************************
!   Portions of Models-3/CMAQ software were developed or based on      *
!   information from various groups: Federal Government employees,     *
!   contractors working on a United States Government contract, and    *
!   non-Federal sources (including research institutions).  These      *
!   research institutions have given the Government permission to      *
!   use, prepare derivative works, and distribute copies of their      *
!   work in Models-3/CMAQ to the public and to permit others to do     *
!   so.  EPA therefore grants similar permissions for use of the       *
!   Models-3/CMAQ software, but users are requested to provide copies  *
!   of derivative works to the Government without restrictions as to   *
!   use by others.  Users are responsible for acquiring their own      *
!   copies of commercial software associated with Models-3/CMAQ and    *
!   for complying with vendor requirements.  Software copyrights by    *
!   the MCNC Environmental Modeling Center are used with their         *
!   permissions subject to the above restrictions.                     *
!***********************************************************************
!
! RCS file, release, date & time of last delta, author, state, [and locker]
! $Header$
!
! what(1) key, module and SID; SCCS file; date and time of last delta:
! %W% %P% %G% %U%
!
!:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
      SUBROUTINE SCAVWDEP_B(jdate, jtime, wtbar, wcbar, tbarc, pbarc, cthk1,
     +  airm, prate1, taucld, polc, polcb, cend, cendb, remov, removac, alfa0
     +  , alfa0b, alfa2, alfa2b, alfa3, alfa3b)
        USE CGRID_SPCS
        IMPLICIT NONE

C...........Includes:

#ifdef Incl
      INCLUDE SUBST_GC_SPC              ! gas chemistry species table
      INCLUDE SUBST_AE_SPC              ! aerosol species table
      INCLUDE SUBST_NR_SPC              ! non-reactive species table
      INCLUDE SUBST_TR_SPC              ! tracer species table
      INCLUDE SUBST_GC_SCAV             ! gas scavenging maping table
      INCLUDE SUBST_AE_SCAV             ! aerosol scavenging maping table
      INCLUDE SUBST_NR_SCAV             ! non-reactive scavenging maping table
      INCLUDE SUBST_TR_SCAV             ! tracer scavenging maping table
#endif

      INCLUDE SUBST_IOPARMS             ! I/O parameters definitions
      INCLUDE SUBST_CONST               ! constants

        CHARACTER(len=120) :: xmsg=' '
!
!...........Parameters:
!
! density of water at 20 C
! and 1 ATM (kg/m3)
        REAL, PARAMETER :: h2odens=1000.0
!
!
! Number of species in CGRID
        INTEGER, PARAMETER :: mxspcs=n_gc_spcd+n_ae_spc+n_nr_spc+n_tr_spc
!
! # of species scavenged
        INTEGER, PARAMETER :: n_cgrid_scavd=n_gc_scavd+n_ae_scav+n_nr_scav+
     +  n_tr_scav
!
! # of species scavenged
        INTEGER, PARAMETER :: n_cgrid_scav=n_gc_scav+n_ae_scav+n_nr_scav+
     +  n_tr_scav
!
!
        REAL, PARAMETER :: twothirds=2.0/3.0
!
! kilograms per gram
        REAL, PARAMETER :: kgpg=1.0e-03
!
!...........Arguments:
!
! current model date, coded YYYYDDD
        INTEGER, INTENT(IN) :: jdate
! current model time, coded HHMMSS
        INTEGER, INTENT(IN) :: jtime
! total wat cont (kg/m2) int. thru cloud depth
        REAL, INTENT(IN) :: wtbar
! liq water content of cloud (kg/m3)
        REAL, INTENT(IN) :: wcbar
! mean cloud temp (K)
        REAL, INTENT(IN) :: tbarc
! mean cloud pressure (Pa)
        REAL, INTENT(IN) :: pbarc
! aq chem calc cloud thickness
        REAL, INTENT(IN) :: cthk1
! total air mass (moles/m2) in cloudy air
        REAL, INTENT(IN) :: airm
! storm rainfall rate (mm/hr)
        REAL, INTENT(IN) :: prate1
! cloud lifetime
        REAL, INTENT(IN) :: taucld
! scav coef for aitken aerosol number
        REAL :: alfa0
        REAL :: alfa0b
! scav coef for aitken aerosol sfc area
        REAL :: alfa2
        REAL :: alfa2b
! scav coef for aitken aerosol mass
        REAL :: alfa3
        REAL :: alfa3b
! variable storing H+ deposition
        REAL :: removac
!
! ave conc incloud (moles/mole)
        REAL, INTENT(IN) :: polc(mxspcs)
        REAL :: polcb(mxspcs)
! ending conc (moles/mole)
        REAL :: cend(mxspcs)
        REAL :: cendb(mxspcs)
! moles/m2 or mm*mol/lit scavenged
        REAL :: remov(mxspcs)
!
!
!...........Local Variables:
!
! flag for first pass thru
        LOGICAL, SAVE :: firstime=.true.
! program name
        CHARACTER(len=16), SAVE :: pname='SCAVWDEP'
!
!
! CGRID species scavenged
        CHARACTER(len=16), SAVE :: cgrid_scav(n_cgrid_scavd)
! CGRID map to scavenged spc
        INTEGER, SAVE :: cgrid_scav_map(n_cgrid_scavd)
! CGRID scav coef factors
        REAL, SAVE :: cgrid_scav_fac(n_cgrid_scavd)
! pointers to aitken aerosol #
        INTEGER, SAVE :: l_numakn(mxspcs)
! pointers to aitken aerosols
        INTEGER, SAVE :: l_masakn(mxspcs)
! pntrs to aitken aerosol surface area
        INTEGER, SAVE :: l_srfakn(mxspcs)
!
!
        INTEGER :: i
! # aitken aerosol number species
        INTEGER, SAVE :: n_numakn
! # aitken aerosol mass species
        INTEGER, SAVE :: n_masakn
! # aitken aerosol sfc area species
        INTEGER, SAVE :: n_srfakn
! relative pointer variable
        INTEGER :: pntr
! liquid species loop counter
        INTEGER :: spc
! variable loop counter
        INTEGER :: var
!
! scavenging coefficient (1/s)
        REAL :: alfa
        REAL :: alfab
! Henry's law constant (mol/l/atm)
        REAL :: kh
! Aitken mode aerosol # (#/m3)
        REAL :: numakn
        REAL :: numaknb
! Total Aitken mode mass (ug/m3)
        REAL :: masakn
        REAL :: masaknb
        REAL :: srfakn
        REAL :: srfaknb
! 1 / TWASH
        REAL :: one_over_twash
! typical value hydrogen ion concentration [mol/l]
        REAL, SAVE :: hplus=1.0e-4
! air density in kg/m3
        REAL :: rhoair
! chemical gas const times temp
        REAL :: rtch
! washout time for clouds (sec) with low liq wat content
        REAL :: twash
! washout scaling factor (mol/l/atm)
        REAL :: twf
!
!...........External Functions:
!
        INTEGER :: INDEXN
        REAL :: HLCONST
        EXTERNAL INDEXN, HLCONST
        INTEGER :: branch
        INTRINSIC EXP
        INTRINSIC INDEX
        REAL :: amax11
        INTRINSIC AMAX1
!
!-----------------------------------------------------------------------
!
!...INITIALIZATION SCAVWDEP module:
!...  event-statistics variables.  Open output files.
!
        IF (firstime) THEN
!
!
!
!
!...first check to make sure that some species in CGRID were specified
!...  for scavenging, otherwise notify the user and return
!
          IF (n_cgrid_scav .LE. 0) THEN
            GOTO 100
          ELSE
            CALL PUSHINTEGER4(nspcsd)
!
!
            CALL CGRID_MAP(nspcsd, gc_strt, ae_strt, nr_strt, tr_strt)
!
!
!...prepare indices for scavenged species
!
!...  load the CGRID to scavenged species pointers for the gases
!
            spc = 0
            CALL PUSHINTEGER4(1)
            DO var=1,n_gc_scav
              spc = spc + 1
              cgrid_scav(spc) = gc_scav(var)
              cgrid_scav_map(spc) = gc_scav_map(var) + gc_strt - 1
              cgrid_scav_fac(spc) = gc_scav_fac(var)
            END DO
!
!...  load the CGRID to scavenged species pointers for the aerosols
!
            DO var=1,n_ae_scav
              spc = spc + 1
              cgrid_scav(spc) = ae_scav(var)
              cgrid_scav_map(spc) = ae_scav_map(var) + ae_strt - 1
              cgrid_scav_fac(spc) = ae_scav_fac(var)
            END DO
!
!...  load the CGRID to scavenged species pointers for the non-reactives
!
            DO var=1,n_nr_scav
              spc = spc + 1
              cgrid_scav(spc) = nr_scav(var)
              cgrid_scav_map(spc) = nr_scav_map(var) + nr_strt - 1
              cgrid_scav_fac(spc) = nr_scav_fac(var)
            END DO
!
!...  load the CGRID to scavenged species pointers for the tracers
!
            DO var=1,n_tr_scav
              spc = spc + 1
              cgrid_scav(spc) = tr_scav(var)
              cgrid_scav_map(spc) = tr_scav_map(var) + tr_strt - 1
              cgrid_scav_fac(spc) = tr_scav_fac(var)
            END DO
!
!...create the pointers from CGRID to the species needed by AQCHEM
!
            n_numakn = INDEXN('NUM_AITKEN      ', n_cgrid_scav, cgrid_scav,
     +        l_numakn)
            n_masakn = INDEXN('AITKEN', n_cgrid_scav, cgrid_scav, l_masakn)
            n_srfakn = INDEXN('SRF_AITKEN      ', n_cgrid_scav, cgrid_scav,
     +        l_srfakn)
!
          END IF
        ELSE
          CALL PUSHINTEGER4(0)
        END IF
!
!...for subsequent calls, check to make sure some species were
!...  specified, otherwise there is no need to perform scavenging
!
        IF (.NOT.n_cgrid_scav .LE. 0) THEN
!
          rtch = molvol/stdtemp*tbarc
          IF (1.0e-20 .LT. prate1) THEN
            amax11 = prate1
          ELSE
            amax11 = 1.0e-20
          END IF
          twash = wtbar*1000.0*cthk1*3600.0/(h2odens*amax11)
          IF (twash .LT. taucld) THEN
            twash = taucld
          ELSE
            twash = twash
          END IF
          one_over_twash = 1.0/twash
          twf = h2odens/(wtbar*rtch)
!
          rhoair = airm/cthk1*mwair*kgpg
!
!...compute total Aitken mode number (#/m3)
!
          numakn = 0.0
!
          DO i=1,n_numakn
            pntr = cgrid_scav_map(l_numakn(i))
            numakn = numakn + polc(pntr)*airm/cthk1
          END DO
!
!...compute total Aitken mode mass (ug/m3)
!
          masakn = 0.0
!
          DO i=1,n_masakn
            pntr = cgrid_scav_map(l_masakn(i))
            IF (INDEX(cgrid_scav(l_masakn(i)), 'NUM') .EQ. 0 .AND. INDEX(
     +          cgrid_scav(l_masakn(i)), 'SRF') .EQ. 0 .AND. INDEX(cgrid_scav(
     +          l_masakn(i)), 'H2O') .EQ. 0) THEN
              masakn = masakn + polc(pntr)*airm/cthk1*ae_molwt(pntr-ae_strt+1)
     +          *1.0e6
              CALL PUSHINTEGER4(2)
            ELSE
              CALL PUSHINTEGER4(1)
            END IF
          END DO
!
!...compute total Aitken mode surface area (m2/m3)
!
          srfakn = 0.0
!
          DO i=1,n_srfakn
            pntr = cgrid_scav_map(l_srfakn(i))
            srfakn = srfakn + polc(pntr)*airm/cthk1
          END DO
          CALL PUSHREAL4(alfa3)
          CALL PUSHREAL4(alfa2)
          CALL PUSHREAL4(alfa0)
          CALL GETALPHA(numakn, masakn, srfakn, wcbar, tbarc, pbarc, rhoair
     +               , alfa0, alfa2, alfa3)
!
!...compute the scavenging coefficients for aitken mode aerosol mass
!...  and number
!...  NOTE:  for now, scavenging coefficients are computed for only
!...         the liquid water content, not on the total water content
!...         therefore, no ice phase scavenging is considered at this
!...         time, but it should be added in the future!
!
!
!...gas scavenging and wet deposition
!
          spc = 0
!
          DO var=1,n_gc_scav
            CALL PUSHINTEGER4(spc)
            spc = spc + 1
            CALL PUSHINTEGER4(pntr)
            pntr = cgrid_scav_map(spc)
            kh = HLCONST(cgrid_scav(spc), tbarc, .true., hplus)
            IF (kh .GT. 0.0) THEN
              CALL PUSHREAL4(alfa)
              alfa = cgrid_scav_fac(spc)*one_over_twash/(1.0+twf/kh)
              CALL PUSHINTEGER4(1)
            ELSE
              CALL PUSHINTEGER4(2)
            END IF
          END DO
!
!...aerosol scavenging and wet deposition
!
          DO var=1,n_ae_scav
            CALL PUSHINTEGER4(spc)
            spc = spc + 1
            CALL PUSHINTEGER4(pntr)
!
            pntr = cgrid_scav_map(spc)
!
            IF (INDEX(cgrid_scav(spc), 'AITKEN') .GT. 0) THEN
              IF (INDEX(cgrid_scav(spc), 'NUM') .GT. 0) THEN
                CALL PUSHREAL4(alfa)
                alfa = cgrid_scav_fac(spc)*alfa0
                CALL PUSHINTEGER4(0)
              ELSE IF (INDEX(cgrid_scav(spc), 'SRF') .GT. 0) THEN
                CALL PUSHREAL4(alfa)
                alfa = cgrid_scav_fac(spc)*alfa2
                CALL PUSHINTEGER4(1)
              ELSE
                CALL PUSHREAL4(alfa)
                alfa = cgrid_scav_fac(spc)*alfa3
                CALL PUSHINTEGER4(2)
              END IF
            ELSE
              CALL PUSHREAL4(alfa)
!sjr          IF ( INDEX( CGRID_SCAV( SPC ), 'SRF' ) .EQ. 0 ) THEN
              alfa = cgrid_scav_fac(spc)*one_over_twash
!sjr          ELSE
!sjr            ALFA = CGRID_SCAV_FAC( SPC ) * TWOTHIRDS * ONE_OVER_TWASH
!sjr          END IF
              CALL PUSHINTEGER4(3)
            END IF
          END DO
!
!
!...non-reactive scavenging and wet deposition
!
          DO var=1,n_nr_scav
            CALL PUSHINTEGER4(spc)
            spc = spc + 1
            CALL PUSHINTEGER4(pntr)
            pntr = cgrid_scav_map(spc)
            kh = HLCONST(cgrid_scav(spc), tbarc, .true., hplus)
            IF (kh .GT. 0.0) THEN
              CALL PUSHREAL4(alfa)
              alfa = cgrid_scav_fac(spc)*one_over_twash/(1.0+twf/kh)
              CALL PUSHINTEGER4(1)
            ELSE
              CALL PUSHINTEGER4(2)
            END IF
          END DO
!
!...tracer scavenging and wet deposition
!
          DO var=1,n_tr_scav
            CALL PUSHINTEGER4(spc)
            spc = spc + 1
            CALL PUSHINTEGER4(pntr)
            pntr = cgrid_scav_map(spc)
            kh = HLCONST(cgrid_scav(spc), tbarc, .true., hplus)
            IF (kh .GT. 0.0) THEN
              CALL PUSHREAL4(alfa)
              alfa = cgrid_scav_fac(spc)*one_over_twash/(1.0+twf/kh)
              CALL PUSHINTEGER4(1)
            ELSE
              CALL PUSHINTEGER4(2)
            END IF
          END DO
	    
	    
	    
	    
          DO var=n_tr_scav,1,-1
            CALL POPINTEGER4(branch)
            IF (branch .LT. 2) THEN
              polcb(pntr) = polcb(pntr) + EXP(-(alfa*taucld))*cendb(pntr)
              cendb(pntr) = 0.0
              CALL POPREAL4(alfa)
            ELSE
              polcb(pntr) = polcb(pntr) + cendb(pntr)
              cendb(pntr) = 0.0
            END IF
            CALL POPINTEGER4(pntr)
            CALL POPINTEGER4(spc)
          END DO
          DO var=n_nr_scav,1,-1
            CALL POPINTEGER4(branch)
            IF (branch .LT. 2) THEN
              polcb(pntr) = polcb(pntr) + EXP(-(alfa*taucld))*cendb(pntr)
              cendb(pntr) = 0.0
              CALL POPREAL4(alfa)
            ELSE
              polcb(pntr) = polcb(pntr) + cendb(pntr)
              cendb(pntr) = 0.0
            END IF
            CALL POPINTEGER4(pntr)
            CALL POPINTEGER4(spc)
          END DO
          DO var=n_ae_scav,1,-1

            polcb(pntr) = polcb(pntr) + EXP(-(taucld*alfa))*cendb(pntr)

            alfab = -(polc(pntr)*EXP(-(taucld*alfa))*taucld*cendb(pntr))
            cendb(pntr) = 0.0
            CALL POPINTEGER4(branch)
            IF (branch .LT. 2) THEN
              IF (branch .LT. 1) THEN
                CALL POPREAL4(alfa)
                alfa0b = alfa0b + cgrid_scav_fac(spc)*alfab
              ELSE
                CALL POPREAL4(alfa)
                alfa2b = alfa2b + cgrid_scav_fac(spc)*alfab
              END IF
            ELSE IF (branch .LT. 3) THEN
              CALL POPREAL4(alfa)
              alfa3b = alfa3b + cgrid_scav_fac(spc)*alfab
            ELSE
              CALL POPREAL4(alfa)
            END IF
            CALL POPINTEGER4(pntr)
            CALL POPINTEGER4(spc)
          END DO
          DO var=n_gc_scav,1,-1
            CALL POPINTEGER4(branch)
            IF (branch .LT. 2) THEN
              polcb(pntr) = polcb(pntr) + EXP(-(alfa*taucld))*cendb(pntr)
              cendb(pntr) = 0.0
              CALL POPREAL4(alfa)
            ELSE
              polcb(pntr) = polcb(pntr) + cendb(pntr)
              cendb(pntr) = 0.0
            END IF
            CALL POPINTEGER4(pntr)
            CALL POPINTEGER4(spc)
          END DO
          CALL POPREAL4(alfa0)
          CALL POPREAL4(alfa2)
          CALL POPREAL4(alfa3)
          CALL GETALPHA_B(numakn, numaknb, masakn, masaknb, srfakn, srfaknb,
     +              wcbar, tbarc, pbarc, rhoair, alfa0, alfa0b, alfa2, alfa2b
     +              , alfa3, alfa3b)


          DO i=n_srfakn,1,-1
            pntr = cgrid_scav_map(l_srfakn(i))
            polcb(pntr) = polcb(pntr) + airm*srfaknb/cthk1
          END DO
          DO i=n_masakn,1,-1
            CALL POPINTEGER4(branch)
            IF (.NOT.branch .LT. 2) THEN
              pntr = cgrid_scav_map(l_masakn(i))
              polcb(pntr) = polcb(pntr) + airm*1.0e6*ae_molwt(pntr-ae_strt+1)*
     +          masaknb/cthk1
            END IF
          END DO
          DO i=n_numakn,1,-1
            pntr = cgrid_scav_map(l_numakn(i))
            polcb(pntr) = polcb(pntr) + airm*numaknb/cthk1
          END DO
          alfa0b = 0.0
          alfa2b = 0.0
          alfa3b = 0.0
        END IF
        CALL POPINTEGER4(branch)
        IF (.NOT.branch .LT. 1) CALL POPINTEGER4(nspcsd)
100      CONTINUE
      END SUBROUTINE SCAVWDEP_B
