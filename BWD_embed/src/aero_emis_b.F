!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5537) -  9 Feb 2015 10:01
!
      MODULE AERO_EMIS_B
!
        USE AERO_EMIS
        IMPLICIT NONE
      CONTAINS
!  Differentiation of get_aero_emis in reverse (adjoint) mode:
!   gradient     of useful results: vdemis_ae vdemis
!   with respect to varying inputs: vdemis embuff
!   Plus diff mem management of: pm_em:in-out
!
!
        SUBROUTINE GET_AERO_EMIS_B(jdate, jtime, emlyrs, rjacm
     +   , vdemisb, vdemis_aeb, cgrid_em_bwd, isens)
!
!slz         USE PT3D_DEFN, ONLY: PT3DEMIS, PMEMIS_PT ! from plume rise
! defines PM emissions species
          USE PMEM_DEFN
!slz         USE PTMAP, ONLY: N_SPC_PTPM, PTPM_MAP    ! defines emissions file(s) PM mapping
!
! stenex (for BARRIER)
          USE SUBST_MODULES
          IMPLICIT NONE
          INCLUDE SUBST_RXCMMN    ! to get mech name
          INCLUDE SUBST_AE_SPC    ! aerosol species names and molecular weights
          INCLUDE SUBST_GC_EMIS   ! gas chem emis surrogate names and map table
          INCLUDE SUBST_CONST     ! physical and mathematical constants
          INCLUDE SUBST_IOPARMS   ! I/O parameters definitions
!         INCLUDE SUBST_IODECL    ! I/O definitions and declarations
#include      SUBST_IODECL        ! I/O definitions and declarations
          INCLUDE SUBST_IOFDESC   ! file header data structure
          INCLUDE SUBST_FILES_ID  ! file name parameters

! *** Arguments
!
! current model date, coded YYYYDDD
          INTEGER, INTENT(IN) :: jdate
! current model time, coded HHMMSS
          INTEGER, INTENT(IN) :: jtime
! number of vertical layers on emis file
          INTEGER, INTENT(IN) :: emlyrs
! recip of mid-layer
! Jacobian [1/m]
          REAL, INTENT(IN) :: rjacm(ncols, nrows, nlays)
! gas emissions [ppmv/s]
          REAL, INTENT(INOUT) :: vdemisb(:, :, :, :)
! aerosol emissions
! [ppmv/s] for mass & number spcs
! [m2/mol/s] for surface area spcs
          REAL :: vdemis_aeb(:, :, :, :)
!
! *** Local Variables
!
!     Geometric Constants
          REAL, PARAMETER :: f6dpi=6.0/pi
          REAL, PARAMETER :: f6dpim9=1.0e-9*f6dpi
!
!     Aerosol version name
          CHARACTER(len=16), SAVE :: ae_vrsn
!
!     Indices in the VDEMIS_AE array
! accumulation mode sulfate
          INTEGER, SAVE :: vso4aj
! Aitken mode sulfate
          INTEGER, SAVE :: vso4ai
! accumulation mode nitrate
          INTEGER, SAVE :: vno3aj
! Aitken mode nitrate
          INTEGER, SAVE :: vno3ai
! accumulation mode primary anthropogenic
! organic aerosol
          INTEGER, SAVE :: vorgpaj
! Aitken mode primary anthropogenic
! organic aerosol
          INTEGER, SAVE :: vorgpai
! accumulation mode elemental carbon
          INTEGER, SAVE :: vecj
! Aitken mode elemental carbon
          INTEGER, SAVE :: veci
! accumulation mode unspeciated PM2.5
          INTEGER, SAVE :: vp25aj
! Aitken mode unspeciated PM2.5
          INTEGER, SAVE :: vp25ai
! coarse mode anthropogenic aerosol
          INTEGER, SAVE :: vantha
! coarse mode marine aerosol
          INTEGER, SAVE :: vseas
! coarse mode soil-derived aerosol
          INTEGER, SAVE :: vsoila
! Aitken mode number
          INTEGER, SAVE :: vat0
! accumulation mode number
          INTEGER, SAVE :: vac0
! coarse mode number
          INTEGER, SAVE :: vcor0
! Aitken mode surface area
          INTEGER, SAVE :: vsurfat
! accumulation mode surface area
          INTEGER, SAVE :: vsurfac
! coarse mode surface area
          INTEGER, SAVE :: vsurfco
! accumulation mode water
          INTEGER, SAVE :: vh2oaj
! Aitken mode water
          INTEGER, SAVE :: vh2oai
! accumulation mode sodium
          INTEGER, SAVE :: vnaj
! Aitken mode sodium
          INTEGER, SAVE :: vnai
! accumulation mode chloride
          INTEGER, SAVE :: vclj
! Aitken mode chloride
          INTEGER, SAVE :: vcli
! coarse mode sodium
          INTEGER, SAVE :: vnak
! coarse mode chloride
          INTEGER, SAVE :: vclk
! coarse mode sulfate
          INTEGER, SAVE :: vso4k
! coarse mode water
          INTEGER, SAVE :: vh2ok
!
!     Geometric mean diameter by volume (or mass) of emitted particles in
!     each mode [ m ].  See paragraph #14 of Binkowski & Roselle (2003)
! Aitken mode
          REAL, PARAMETER :: dgvem_at=0.03e-6
! accumulation mode
          REAL, PARAMETER :: dgvem_ac=0.3e-6
! coarse mode
          REAL, PARAMETER :: dgvem_co=6.0e-6
!
!     Geometric standard deviation of emitted particles in each mode, as
!     described in paragraph #14 of Binkowski & Roselle (2003)
! Aitken mode
          REAL, PARAMETER :: sgem_at=1.7
! accumulation mode
          REAL, PARAMETER :: sgem_ac=2.0
! coarse mode
          REAL, PARAMETER :: sgem_co=2.2
!
!     Variables for converting mass emissions rate to number emissions rate
! Aitken mode
          REAL, SAVE :: factnumat
! accumulation mode
          REAL, SAVE :: factnumac
! Coarse mode
          REAL, SAVE :: factnumc
!
!     Variables for converting mass emissions rate to 2nd moment emissions rate
! Aitken mode
          REAL, SAVE :: factm2at
! acumulation mode
          REAL, SAVE :: factm2ac
! coarse mode
          REAL, SAVE :: factm2co
!
!     Variables for calculating the volume of each grid cell
! grid-cell width and length [m]
          REAL :: dx1, dx2
! grid area [m2]
          REAL :: grdarea
! grid height [sigma]
          REAL, ALLOCATABLE, SAVE :: grdhgt(:)
! grid volume [m2*sigma]
          REAL, ALLOCATABLE, SAVE :: grdvol(:)
!
!     Emission rate of all aerosol species interpolated to current time
! in all grid cells
          REAL, allocatable, save :: embuffb(:, :, :, :)
          REAL, POINTER :: CGRID_EM_BWD( :,:,:,: ) ! sensitivities of J w.r.t. emissions
          integer :: isens
! in one grid cell
          REAL, ALLOCATABLE, SAVE :: pm_emb(:)
!     Factor for converting aerosol emissions from input units ...
! into [ug/sec]
          REAL :: convem_pm_mass
! into [ug/m2/sec]
          REAL, ALLOCATABLE, SAVE :: convem_pm(:)
! into [ug/m3/sec]
          REAL :: gsfac
!
!     Variables interpolated from the meteorological input files
! atmospheric pressure [Pa]
          REAL :: pres(ncols, nrows)
! air temperature [K]
          REAL :: ta(ncols, nrows)
! H2O mass mixing ratio [kg/kg]
          REAL :: qv(ncols, nrows)
! air density [kg/m3]
          REAL :: dens(ncols, nrows, nlays)
! wind speed at 10m [m/s]
          REAL :: wspd10(ncols, nrows)
!
!     Variables for converting emission rates into molar-mixing-ratio units
! g/kg
          REAL, PARAMETER :: gpkg=1.0e+03
! ug/g
          REAL, PARAMETER :: mgpg=1.0e+06
! reciprocal of Avogadro
! assuming 78.06% N2, 21% O2,
! and 0.943% Ar
! (Source : Hobbs, 1995) pp 69-70
          REAL, PARAMETER :: ravo=1.0/avo
!        REAL, PARAMETER :: MWAIR = 28.9628    ! molar mass of dry air [g/mol]
! conversion factor for mass emissions [m3/mol]
          REAL :: convm
! conversion factor for number emissions [1e6*m3]
          REAL :: convn
! conversion factor for surface area emissions [m3/mol]
          REAL :: convs
!
!     Domain decomposition info from emission and meteorology files
! origin offset
          INTEGER :: gxoff, gyoff
          INTEGER, SAVE :: startcol, endcol, startrow, endrow
          INTEGER, SAVE :: strtcol_o1, endcol_o1, strtrow_o1, endrow_o1
          INTEGER, SAVE :: strtcolmc3, endcolmc3, strtrowmc3, endrowmc3
!
!     Aerosol mass-emission rates [ug/m3/s]
! fine primary organic carbon
          REAL :: epoc
          REAL :: epocb
! fine primary elemental carbon
          REAL :: epec
          REAL :: epecb
! fine primary nitrate
          REAL :: epno3
          REAL :: epno3b
! fine primary sulfate
          REAL :: epso4
          REAL :: epso4b
! fine primary unspeciated pm
          REAL :: epmf
          REAL :: epmfb
! coarse anthropogenic aerosol
          REAL :: epmco
          REAL :: epmcob
! coarse soil-derived aerosol
          REAL :: esoilco
          REAL :: esoilcob
! coarse marine aerosol
          REAL :: eseasco
!
!     Variables for handling vapor-phase sulfuric acid emissions
! emission rate [ppmv/s]
          REAL :: emsulf
          REAL :: emsulfb
! molar mass [g/mol]
          REAL, PARAMETER :: mwh2so4=98.0
! index to H2SO4 in VDEMIS array
          INTEGER, SAVE :: vsulf
!
!     Speciation factors for coarse mode emissions, from paragraph #15 of
!     Binkowski & Roselle (2003)
! (fugitive dust)/PMC
          REAL, PARAMETER :: fac_dust=0.90
! (non-fugitive dust)/PMC
          REAL, PARAMETER :: fac_other=0.10
!
!     Variables for handling sea-salt emissions
! fractional seawater cover
          REAL :: ocean(ncols, nrows)
! fractional surf-zone cover
          REAL :: szone(ncols, nrows)
! all emission rates for
!  diagnostic output file
          REAL :: ssoutd(nssdiag)
! mass emission rates [ug/m3/s]
          REAL :: ssoutm(nssspc, nssmod)
! number emission rates [1/m3/s]
          REAL :: ssoutn(nssmod)
! surface-area emisrates [m2/m3/s]
          REAL :: ssouts(nssmod)
!
!     Grid-specific values for sea-salt calculations
! fractional seawater cover
          REAL :: ofrac
! fractional surf-zone cover
          REAL :: sfrac
! atmospheric pressure [Pa]
          REAL :: blkprs
! air temperature [K]
          REAL :: blkta
! H2O mass mixing ratio [kg/kg]
          REAL :: blkqv
! wind speed at 10m [m/s]
          REAL :: u10
! reciprocal of layer-1 hgt [1/m]
          REAL :: rlay1ht
! grid-cell volume [m3]
          REAL :: airvol
!
!     Factors for splitting primary carbon emissions into Aitken and
!     accumulation modes, from paragraph #12 of Binkowski & Roselle (2003)
! accumulation mode
          REAL, PARAMETER :: facem25_acc=0.999
! Aitken mode
          REAL, PARAMETER :: facem25_atkn=0.001
!
!     Mode-specific mass-emission rates [ug/m3/s]
! Aitken mode unspeciated aerosol
          REAL :: epm25at
! accumulation mode unspeciated aerosol
          REAL :: epm25ac
          REAL :: epm25acb
! Aitken mode primary organic aerosol
          REAL :: eporgat
          REAL :: eporgatb
! accumulation mode primary organic aerosol
          REAL :: eporgac
          REAL :: eporgacb
! Aitken mode elemental carbon
          REAL :: epecat
          REAL :: epecatb
! accumulation mode elemental carbon
          REAL :: epecac
          REAL :: epecacb
! Aitken mode primary sulfate
          REAL :: epso4at
! accumulation mode primary sulfate
          REAL :: epso4ac
          REAL :: epso4acb
! coarse mode primary sulfate
          REAL :: epso4co
! Aitken mode primary nitrate
          REAL :: epno3at
! accumulation mode primary nitrate
          REAL :: epno3ac
          REAL :: epno3acb
! Aitken mode sodium
          REAL :: epnaat
! accumulation mode sodium
          REAL :: epnaac
! coarse mode sodium
          REAL :: epnaco
! Aitken mode chloride
          REAL :: epclat
! accumulation mode chloride
          REAL :: epclac
! coarse mode chloride
          REAL :: epclco
! Aitken mode primary water
          REAL :: eph2oat
! accumulation mode primary water
          REAL :: eph2oac
! coarse mode primary water
          REAL :: eph2oco
!
!     Factors for converting aerosol mass concentration [ug/m3] to 3rd
!     moment concentration [m3/m3]
          REAL, PARAMETER :: so4fac=f6dpim9/rhoso4
          REAL, PARAMETER :: no3fac=f6dpim9/rhono3
          REAL, PARAMETER :: orgfac=f6dpim9/rhoorg
          REAL, PARAMETER :: soilfac=f6dpim9/rhosoil
          REAL, PARAMETER :: seasfac=f6dpim9/rhoseas
          REAL, PARAMETER :: anthfac=f6dpim9/rhoanth
!
!     Third moment emissions rates [m3/m3/s]
! Aitken mode
          REAL :: emism3at
          REAL :: emism3atb
! accumulation mode
          REAL :: emism3ac
          REAL :: emism3acb
! coarse mode
          REAL :: emism3co
          REAL :: emism3cob
!
!     Number emissions rates [1/m3/s]
! Aitken mode
          REAL :: em_numatkn
          REAL :: em_numatknb
! accumulation mode
          REAL :: em_numacc
          REAL :: em_numaccb
! coarse mode
          REAL :: em_numcor
          REAL :: em_numcorb
!
!     Surface area emission rates [m2/m3/s]
! Aitken mode
          REAL :: em_srfatkn
          REAL :: em_srfatknb
! accumulation mode
          REAL :: em_srfacc
          REAL :: em_srfaccb
! coarse mode
          REAL :: em_srfcor
          REAL :: em_srfcorb
!
!     Variables for writing out sea-salt emission rates
! local write counter
          INTEGER, SAVE :: wstep=0
! scenario start date & time
          INTEGER, SAVE :: sdate, stime
! fxn not declared in IODECL3.EXT
          INTEGER, EXTERNAL :: ENVINT
! fxn not declared in IODECL3.EXT
          INTEGER, EXTERNAL :: TIME2SEC
! fxn not declared in IODECL3.EXT
          INTEGER, EXTERNAL :: SEC2TIME
! seasalt emission write buffer
          REAL :: wrss(ncols, nrows)
! get environment variable as boolean
          LOGICAL, EXTERNAL :: ENVYN
!
!     Miscellaneous variables
          LOGICAL, SAVE :: firstime=.true.
          INTEGER, SAVE :: logdev
          INTEGER, EXTERNAL :: INDEX1, TRIMLEN
          INTEGER :: indx
! ENV..., ALLOCATE status
          INTEGER :: status
! environment variable description
          CHARACTER(len=80) :: vardesc
          CHARACTER(len=96), SAVE :: xmsg=' '
          CHARACTER(len=16), SAVE :: pname='GET_AERO_EMISB'
! temp var for species names
          CHARACTER(len=16) :: vname
! Loop indices
          INTEGER :: c, r, l, n, v
          INTRINSIC INDEX
          EXTERNAL SUBHFILE
          INTRINSIC LOG
          INTRINSIC EXP
          INTRINSIC FLOAT
          INTRINSIC COS
          INTRINSIC MAX
          LOGICAL :: result1
          LOGICAL :: res
          LOGICAL :: res0
          LOGICAL :: res1
          REAL :: tmp
          INTEGER :: branch
          REAL :: tmpb
! FIRSTIME
!
! ----------------------------------------------------------------------
!
          IF (firstime) THEN
            firstime = .false.
! check on MECHNAME
!
            IF (INDEX(mechname, 'AE3') .GT. 0) THEN
              ae_vrsn = 'AE3'
            ELSE IF (INDEX(mechname, 'AE4') .GT. 0) THEN
              ae_vrsn = 'AE4'
            ELSE IF (INDEX(mechname, 'AE5') .GT. 0) THEN
              ae_vrsn = 'AE5'
            END IF

C *** Set indices for the VDEMIS_AE array using the AE_EMIS table
C     This is the subset of the AE_SPC table that have emissions

            VNAME = 'ASO4J'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VSO4AJ = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'ASO4I'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VSO4AI = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'ANO3J'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VNO3AJ = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'ANO3I'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VNO3AI = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'AORGPAJ'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VORGPAJ = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'AORGPAI'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VORGPAI = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'AECJ'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VECJ = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'AECI'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VECI = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'A25J'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VP25AJ = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'A25I'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VP25AI = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'ACORS'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VANTHA = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            IF ( AE_VRSN .EQ. 'AE3' ) THEN
               VNAME = 'ASEAS'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VSEAS = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF
            END IF

            VNAME = 'ASOIL'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VSOILA = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'NUMATKN'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VAT0 = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'NUMACC'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VAC0 = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'NUMCOR'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VCOR0 = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'SRFATKN'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VSURFAT = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            VNAME = 'SRFACC'
            N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
            IF ( N .NE. 0 ) THEN
               VSURFAC = N
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

            IF ( AE_VRSN .NE. 'AE3' ) THEN

               VNAME = 'AH2OJ'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VH2OAJ = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'AH2OI'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VH2OAI = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ANAJ'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VNAJ = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ANAI'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VNAI = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ACLJ'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VCLJ = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ACLI'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VCLI = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ANAK'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VNAK = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ACLK'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VCLK = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'ASO4K'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VSO4K = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF

               VNAME = 'AH2OK'
               N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
               IF ( N .NE. 0 ) THEN
                  VH2OK = N
               ELSE
                  XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                  CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
               END IF
               
               IF ( AE_VRSN .EQ. 'AE5' ) THEN
                  VNAME = 'SRFCOR'
                  N = INDEX1( VNAME, N_AE_EMIS, AE_EMIS )
                  IF ( N .NE. 0 ) THEN
                     VSURFCO = N
                  ELSE
                     XMSG = 'Could not find ' // VNAME // 'in AE_EMIS table'
                     CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
                  END IF
               END IF         
!
!slz               CALL SUBHFILE ( OCEAN_1, GXOFF, GYOFF,
!slz     &                         STRTCOL_O1, ENDCOL_O1, STRTROW_O1, ENDROW_O1 )
!
            END IF
!
! *** Save array of MWs and reciprocals [AE_EM_MW( V ) required for pa_update.F]
!
            DO v=1,n_ae_emis
              ae_em_mw(v) = ae_molwt(ae_emis_map(v))
              r_ae_em_mw(v) = 1.0/ae_em_mw(v)
            END DO
!
! *** Calculate factors for converting 3rd moment emission rates into number
!     emission rates.  See Equation 7b of Binkowski & Roselle (2003)
!
            factnumat = EXP(4.5*LOG(sgem_at)**2)/dgvem_at**3
            factnumac = EXP(4.5*LOG(sgem_ac)**2)/dgvem_ac**3
            factnumc = EXP(4.5*LOG(sgem_co)**2)/dgvem_co**3
!
! *** Calculate factors for converting 3rd moment emission rates into 2nd
!     moment emission rates.  See Equation 7c of Binkowski & Roselle (2003)
!
            factm2at = EXP(0.5*LOG(sgem_at)**2)/dgvem_at
            factm2ac = EXP(0.5*LOG(sgem_ac)**2)/dgvem_ac
            factm2co = EXP(0.5*LOG(sgem_co)**2)/dgvem_co
!
! *** Allocate memory for PM_EM, EMBUFF, GRDHGT, GRDVOL, CONVEM_PM, and SSBF
!
            ALLOCATE ( PM_EMB( N_EMIS_PM ), STAT = STATUS )
            IF ( STATUS .NE. 0 ) THEN
               XMSG = '*** PM_EMB memory allocation failed'
               write (*,*) "slzdbg", n_emis_pm
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF
!
            ALLOCATE ( CONVEM_PM( EMLYRS ), STAT = STATUS )
            IF ( STATUS .NE. 0 ) THEN
               XMSG = '*** CONVEM_PM memory allocation failed'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF

            ALLOCATE ( GRDHGT( EMLYRS ), STAT = STATUS )
            IF ( STATUS .NE. 0 ) THEN
               XMSG = '*** GRDHGT memory allocation failed'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF
            
            ALLOCATE ( GRDVOL( EMLYRS ), STAT = STATUS )
            IF ( STATUS .NE. 0 ) THEN
               XMSG = '*** GRDVOL memory allocation failed'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF

            ALLOCATE ( EMBUFFB( MY_NCOLS,MY_NROWS,EMLYRS,N_EMIS_PM ),
     &                 STAT = STATUS )
            IF ( STATUS .NE. 0 ) THEN
               XMSG = '*** EMBUFFB memory allocation failed'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT1 )
            END IF

! *** Calculate length and width of each grid cell
!     note: crude estimate is made for LAT/LONG coordinate systems
!
            IF (gdtyp_gd .EQ. latgrd3) THEN
! in m
              dx1 = dg2m*xcell_gd
! in m
              dx2 = dg2m*ycell_gd*COS(pi180*(yorig_gd+ycell_gd*FLOAT(gl_nrows/
     +         2)))
            ELSE
! in m
              dx1 = xcell_gd
! in m
              dx2 = ycell_gd
            END IF
!
! *** Calculate height of grid cell in each layer in sigma coordinates
!     Multiply by grid area [m2] to obtain grid volume
!
            grdarea = dx1*dx2
            DO l=1,emlyrs
              grdhgt(l) = x3face_gd(l) - x3face_gd(l-1)
              grdvol(l) = grdhgt(l)*grdarea
            END DO
!
! *** Calculate scaling factor for converting aerosol emissions from
!     their input units to [ug/s] and then to [ug/m2/s] using layer-
!     specific grid-cell volume
!
            IF (unitsckpm .EQ. 'G/S' .OR. unitsckpm .EQ. 'g/s') THEN
! (g/s) -> (ug/s)
              convem_pm_mass = mgpg
            ELSE IF (unitsckpm .EQ. 'KG/HR' .OR. unitsckpm .EQ. 'kg/hr') THEN
! (kg/hr) -> (ug/s)
              convem_pm_mass = gpkg*mgpg/3600.0
            END IF
!
            DO l=1,emlyrs
              convem_pm(l) = convem_pm_mass/grdvol(l)
            END DO
!
! *** Find location of sulfuric acid vapor in VDEMIS array
!
            VNAME = 'SULF'
            INDX = INDEX1 ( VNAME, N_GC_EMIS, GC_EMIS )
            IF ( INDX .NE. 0 ) THEN
               VSULF = INDX  ! index for vapor-phase H2SO4 emissions
            ELSE
               XMSG = 'Could not find ' // VNAME // 'in gas table'
               CALL M3EXIT ( PNAME, JDATE, JTIME, XMSG, XSTAT3 )
            END IF

!
! *** Get domain decomposition info from input files
!
!slz
!slz not needed for AD
!slz
!slz            CALL SUBHFILE ( EMIS_1, GXOFF, GYOFF,
!slz     &                      STARTCOL, ENDCOL, STARTROW, ENDROW )
!slz
            CALL SUBHFILE ( MET_CRO_3D, GXOFF, GYOFF,
     &                      STRTCOLMC3, ENDCOLMC3, STRTROWMC3, ENDROWMC3 )

          END IF
!
! *** Read air density [kg/m3], atmospheric pressure [Pa], air temperature
!     [K], specific humidity [kg H2O / kg air], and 10m wind speed [m/s]
!     from meteorology file.  Interpolate to the current time.  Store results
!     in DENS, PRES, TA, QV, and WSPD10 arrays.
!
          res1 = INTERPX(met_cro_3d, 'DENS', pname, strtcolmc3, endcolmc3,
     +     strtrowmc3, endrowmc3, 1, nlays, jdate, jtime, dens)
!
!
! *** Loop over each grid cell
!
          pm_emb = 0.0
          embuffb = 0.0
          DO l=1,emlyrs
            DO r=1, my_nrows
              DO c=1, my_ncols
                convm = mwair/gpkg/dens(c, r, l)
                convs = convm
                IF (ae_vrsn.NE.'AE5') THEN
                  em_srfcorb = 0.0
                ELSE
                  convm = mwair/gpkg/dens(c, r, l)
                  convs = convm
                  em_srfcorb = convs*vdemis_aeb(vsurfco, l, c, r)
                  vdemis_aeb(vsurfco, l, c, r) = 0.0
                END IF

                IF (ae_vrsn .EQ. 'AE3') THEN
                  vdemis_aeb(vseas, l, c, r) = 0.0
                ELSE
                  vdemis_aeb(vh2ok, l, c, r) = 0.0
                  vdemis_aeb(vso4k, l, c, r) = 0.0
                  vdemis_aeb(vclk, l, c, r) = 0.0
                  vdemis_aeb(vnak, l, c, r) = 0.0
                  vdemis_aeb(vclj, l, c, r) = 0.0
                  vdemis_aeb(vcli, l, c, r) = 0.0
                  vdemis_aeb(vnaj, l, c, r) = 0.0
                  vdemis_aeb(vnai, l, c, r) = 0.0
                  vdemis_aeb(vh2oaj, l, c, r) = 0.0
                  vdemis_aeb(vh2oai, l, c, r) = 0.0
                END IF
                em_srfaccb = convs*vdemis_aeb(vsurfac, l, c, r)
                vdemis_aeb(vsurfac, l, c, r) = 0.0
                em_srfatknb = convs*vdemis_aeb(vsurfat, l, c, r)
                vdemis_aeb(vsurfat, l, c, r) = 0.0
                convn = convm*ravo*1.0e+06
                em_numcorb = convn*vdemis_aeb(vcor0, l, c, r)
                vdemis_aeb(vcor0, l, c, r) = 0.0
                em_numaccb = convn*vdemis_aeb(vac0, l, c, r)
                vdemis_aeb(vac0, l, c, r) = 0.0
                em_numatknb = convn*vdemis_aeb(vat0, l, c, r)
                vdemis_aeb(vat0, l, c, r) = 0.0
                esoilcob = r_ae_em_mw(vsoila)*convm*vdemis_aeb(vsoila, l, c, r
     +           )
                vdemis_aeb(vsoila, l, c, r) = 0.0
                epmcob = r_ae_em_mw(vantha)*convm*vdemis_aeb(vantha, l, c, r)
                vdemis_aeb(vantha, l, c, r) = 0.0
                epm25acb = r_ae_em_mw(vp25aj)*convm*vdemis_aeb(vp25aj, l, c, r
     +           )
                vdemis_aeb(vp25aj, l, c, r) = 0.0
                vdemis_aeb(vp25ai, l, c, r) = 0.0
                epecacb = r_ae_em_mw(vecj)*convm*vdemis_aeb(vecj, l, c, r)
                vdemis_aeb(vecj, l, c, r) = 0.0
                epecatb = r_ae_em_mw(veci)*convm*vdemis_aeb(veci, l, c, r)
                vdemis_aeb(veci, l, c, r) = 0.0
                eporgacb = r_ae_em_mw(vorgpaj)*convm*vdemis_aeb(vorgpaj, l, c
     +           , r)
                vdemis_aeb(vorgpaj, l, c, r) = 0.0
                eporgatb = r_ae_em_mw(vorgpai)*convm*vdemis_aeb(vorgpai, l, c
     +           , r)
                vdemis_aeb(vorgpai, l, c, r) = 0.0
                epno3acb = r_ae_em_mw(vno3aj)*convm*vdemis_aeb(vno3aj, l, c, r
     +           )
                vdemis_aeb(vno3aj, l, c, r) = 0.0
                vdemis_aeb(vno3ai, l, c, r) = 0.0
                epso4acb = r_ae_em_mw(vso4aj)*convm*vdemis_aeb(vso4aj, l, c, r
     +           )
                vdemis_aeb(vso4aj, l, c, r) = 0.0
                vdemis_aeb(vso4ai, l, c, r) = 0.0
                emism3cob = factnumc*em_numcorb + pi*factm2co*em_srfcorb
                emism3acb = factnumac*em_numaccb + pi*factm2ac*em_srfaccb
                emism3atb = factnumat*em_numatknb + pi*factm2at*em_srfatknb
                esoilcob = esoilcob + soilfac*emism3cob
                epmcob = epmcob + anthfac*emism3cob
                epm25acb = epm25acb + anthfac*emism3acb
                epecacb = epecacb + anthfac*emism3acb
                eporgacb = eporgacb + orgfac*emism3acb
                epso4acb = epso4acb + so4fac*emism3acb
                epno3acb = epno3acb + no3fac*emism3acb
                epecatb = epecatb + anthfac*emism3atb
                eporgatb = eporgatb + orgfac*emism3atb
                epecb = facem25_atkn*epecatb + facem25_acc*epecacb
                epocb = facem25_atkn*eporgatb + facem25_acc*eporgacb
                epno3b = epno3acb
                epso4b = epso4acb
                epmfb = epm25acb
                emsulfb = mwh2so4*epso4b/convm
                vdemisb(vsulf, l, c, r) = emsulfb
                gsfac = convem_pm(l)*rjacm(c, r, l)
                pm_emb(vpmc) = pm_emb(vpmc) + fac_other*gsfac*epmcob
                pm_emb(vpmc) = pm_emb(vpmc) + fac_dust*gsfac*esoilcob

                pm_emb(vpec) = pm_emb(vpec) + gsfac*epecb
                pm_emb(vpmf) = pm_emb(vpmf) + gsfac*epmfb
                pm_emb(vpno3) = pm_emb(vpno3) + gsfac*epno3b
                pm_emb(vpso4) = pm_emb(vpso4) + gsfac*epso4b
                pm_emb(vpoc) = pm_emb(vpoc) + gsfac*epocb

                DO n=1, n_emis_pm
                  embuffb(c, r, l, n) = embuffb(c, r, l, n) + pm_emb(n)
                  pm_emb(n) = 0.0
                END DO
              END DO
            END DO
          END DO

          DO n=1, n_emis_pm
            isens = isens + 1
            DO l=1,emlyrs
              DO r=1,my_nrows
                DO c=1,my_ncols
                  cgrid_em_bwd(c, r, l, isens) = embuffb(c, r, l, n)
                  embuffb(c, r, l, n) = 0.
                END DO
              END DO
            END DO
          END DO

        END SUBROUTINE GET_AERO_EMIS_B
      END MODULE AERO_EMIS_B
