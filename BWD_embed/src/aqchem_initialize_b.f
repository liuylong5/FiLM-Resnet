!        Generated by TAPENADE     (INRIA, Ecuador team)
!  Tapenade 3.10 (r5537) -  9 Feb 2015 10:01
!
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
! Initialization File
!
! Generated by KPP-2.2.3 symbolic chemistry Kinetics PreProcessor
!       (http://www.cs.vt.edu/~asandu/Software/KPP)
! KPP is distributed under GPL, the general public licence
!       (http://www.gnu.org/copyleft/gpl.html)
! (C) 1995-1997, V. Damian & A. Sandu, CGRER, Univ. Iowa
! (C) 1997-2005, A. Sandu, Michigan Tech, Virginia Tech
!     With important contributions from:
!        M. Damian, Villanova University, USA
!        R. Sander, Max-Planck Institute for Chemistry, Mainz, Germany
!
! File                 : aqchem_Initialize.F90
! Time                 : Tue Feb 26 14:38:30 2013
! Working directory    : /home/kfahey/kpp-2.2.3/aqchem_5p0_kf
! Equation file        : aqchem.kpp
! Output root filename : aqchem
!
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      MODULE AQCHEM_INITIALIZE_B
!  USE aqchem_Parameters, ONLY: dp, NVAR, NFIX
        USE AQCHEM_PARAMETERS
        USE AQCHEM_GLOBAL
        IMPLICIT NONE
! End of Initialize function
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

      CONTAINS
!  Differentiation of initialize in reverse (adjoint) mode:
!   gradient     of useful results: var rconst fix gas aerosol
!   with respect to varying inputs: gas alfa3 aerosol
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
! Initialize - function to initialize concentrations
!   Arguments :
!
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!kf SUBROUTINE Initialize ( )
        SUBROUTINE INITIALIZE_B(temp2, pres_pa, taucld, prcrate, wcavg, wtavg
     +   , airm, alfa0, alfa3, alfa3b, gas, gasb, aerosol, aerosolb, cthk1, varb)
!, DARK )
          USE AQCHEM_GLOBAL
          USE AQ_DATA
          IMPLICIT NONE
! End INLINED initializations
!         INCLUDE 'new_AQ_PARAMS.EXT'      ! aqueous chemistry parameters for box
          INTEGER :: i
          REAL(kind=dp) :: x
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!...........Arguments:
! total air mass in cloudy layers (mol/m2)
          REAL, INTENT(IN) :: airm
! scav coef for aitken aerosol number
          REAL, INTENT(IN) :: alfa0
! scav coef for aitken aerosol mass
          REAL, INTENT(IN) :: alfa3
          REAL :: alfa3b
! precip rate (mm/hr)
          REAL, INTENT(IN) :: prcrate
! pressure (Pa)
          REAL, INTENT(IN) :: pres_pa
! timestep for cloud (s)
          REAL, INTENT(IN) :: taucld
! temperature (K)
          REAL, INTENT(IN) :: temp2
! liquid water content (kg/m3)
          REAL, INTENT(IN) :: wcavg
! total water content (kg/m3)
          REAL, INTENT(IN) :: wtavg
!      LOGICAL,   INTENT( IN )  :: DARK      ! DARK = TRUE is night,  DARK = FALSE is day
! gas phase concentrations (mol/molV)
          REAL*8, INTENT(IN) :: gas(ngas)
          REAL*8 :: gasb(ngas)
! aerosol concentrations (mol/molV)
          REAL*8, INTENT(IN) :: aerosol(naer, nmodes)
          REAL*8 :: aerosolb(naer, nmodes)
          REAL*8, INTENT(IN) :: cthk1
!...........Local Variables:
!	Need to input and declare aqchem argument list
!	also declare CTHK1, TWASH, FE_SOL, FE_III, MN_SOL, MN_II
!	FECOR, MNCOR, NACOR, MGCOR, CACOR, KCOR, SUMPOS,
!	SUMNEG, Kw, CHGBAL
!	REAL( 8 ) :: CTHK1
          REAL(kind=dp), DIMENSION(NVAR) :: varb

          REAL*8 :: twash
!	REAL( 8 ) :: FE_SOL
!	REAL( 8 ) :: FE_III
!	REAL( 8 ) :: MN_SOL
!	REAL( 8 ) :: MN_II
!	REAL( 8 ) :: FECOR
!	REAL( 8 ) :: MNCOR
!	REAL( 8 ) :: NACOR
!	REAL( 8 ) :: MGCOR
!	REAL( 8 ) :: CACOR
!	REAL( 8 ) :: KCOR
          REAL*8 :: sumpos
          REAL*8 :: sumposb
          REAL*8 :: sumneg
          REAL*8 :: sumnegb
          REAL*8 :: kw
!	REAL :: Kw
          REAL*8 :: chgbal
          REAL*8 :: chgbalb
          INTRINSIC REAL
          INTRINSIC MAX
          INTRINSIC EXP
          INTRINSIC SQRT
          REAL(kind=dp) :: tmp
          REAL(kind=dp) :: tmpb
          DOUBLE PRECISION :: max1
          DOUBLE PRECISION :: y1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          cfactor = 1.000000e+00_dp
          x = 0.0*cfactor
          DO i=1,nvar
            var(i) = x
          END DO
! constant rate coefficients
! END constant rate coefficients
! INLINED initializations
! Droplet diameter = 16 micrometers
          temp_kpp = temp2
! Pressure (ATM)
          press = pres_pa/101325.d0
          lwc_kpp = wcavg
! L H2O / L AIR
          lwcfrac = lwc_kpp*1.d-3
          delinvt = (298.d0-temp_kpp)/(298.d0*temp_kpp)
!     MGLYH = 3.2E+04  ! should depend on gas phase mech, just testing for now
          phi2 = 1000.d0/6.022d23/lwcfrac
          invphi2 = 1/phi2
! Fraction partitioning to FE(III) and MN(II)
!        IF ( DARK ) THEN
!           FE_III = 0.9D0  ! Night time, GS 01July2011
!        ELSE
!           FE_III = 0.1D0  ! Day time, GS 01July2011
!        END IF
!
!        MN_II = 1.0D0
! Solubility of Fe and Mn
!        FE_SOL = 0.1D0
!        MN_SOL = 0.5D0
! Set initial dynamic concentrations based on input gas and aerosol concentrations
          var(ind_g_so2) = gas(lso2)
          var(ind_g_hno3) = gas(lhno3) + 2.d0*gas(ln2o5)
          var(ind_g_co2) = gas(lco2)
          var(ind_g_nh3) = gas(lnh3)
          var(ind_g_h2o2) = gas(lh2o2)
          var(ind_g_o3) = gas(lo3)
          var(ind_g_hcooh) = gas(lfoa)
          var(ind_g_mhp) = gas(lmhp)
          var(ind_g_paa) = gas(lpaa)
          var(ind_g_hcl) = gas(lhcl)
          var(ind_g_gly) = gas(lgly)
          var(ind_g_mgly) = gas(lmgly)
!        VAR(ind_G_HO) = GAS(LHO)
!        VAR(ind_G_N2O5) = GAS(LN2O5)   -- added to HNO3
!        VAR(ind_G_H2SO4) = GAS(LH2SO4)  -- added to SO4MIN2
          var(ind_a_no3akn) = aerosol(lno3, akn)
          var(ind_a_nh4akn) = aerosol(lnh4, akn)
          var(ind_a_clakn) = aerosol(lcl, akn)
          var(ind_a_naakn) = aerosol(lna, akn)
          var(ind_a_so4akn) = aerosol(lso4, akn)
          var(ind_a_pecakn) = aerosol(lec, akn)
!slz          var(ind_a_poaakn) = aerosol(lpoa, akn)
          var(ind_a_priakn) = aerosol(lpri, akn)
!     VAR(ind_A_NUMAKN) = AEROSOL(LNUM,AKN)
! Instantaneous droplet activation of ACC and COR modes and dissolution of N2O5 and H2SO4
          var(ind_l_so4min2) = aerosol(lso4, acc) + aerosol(lso4, cor)
          var(ind_l_no3min) = aerosol(lno3, acc) + aerosol(lno3, cor)
          var(ind_l_nh4plus) = aerosol(lnh4, acc) + aerosol(lnh4, cor)
          var(ind_l_clmin) = aerosol(lcl, acc) + aerosol(lcl, cor)
          var(ind_l_priacc) = aerosol(lpri, acc)
          var(ind_l_naplus) = aerosol(lna, acc)
!     VAR(ind_L_CAPLUS2) = AEROSOL(LCAACC,ACC)
!     VAR(ind_L_MGPLUS2) = AEROSOL(LMGACC,ACC)
!     VAR(ind_L_KPLUS) = AEROSOL(LKACC,ACC)
          var(ind_l_pecacc) = aerosol(lec, acc)
          var(ind_l_orgc) = aerosol(lorgc, acc)
!slz          var(ind_l_poaacc) = aerosol(lpoa, acc)
          var(ind_l_so4min2) = var(ind_l_so4min2) + gas(lh2so4)
          var(ind_l_co3min2) = aerosol(lcaco3, cor) + aerosol(lmgco3, cor)
          var(ind_l_caplus2) = aerosol(lcaco3, cor)
          var(ind_l_mgplus2) = aerosol(lmgco3, cor)
          var(ind_l_kplus) = aerosol(lk, cor)
! Coarse crustal species from SOILCOR, ANTHCOR, SEASCOR
!        FECOR   = 0.0281D0  * ( 100.0D0 / 55.8D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0467D0  * ( 100.0D0 / 55.8D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        MNCOR   = 0.00078D0 * ( 100.0D0 / 54.9D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0011D0  * ( 100.0D0 / 54.9D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        NACOR   = 0.8373D0  * (  23.0D0 / 23.0D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0652D0  * ( 100.0D0 / 23.0D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0023D0  * ( 100.0D0 / 23.0D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        MGCOR   = 0.0997D0  * (  23.0D0 / 24.3D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0000D0  * ( 100.0D0 / 24.3D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0032D0  * ( 100.0D0 / 24.3D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        CACOR   = 0.0320D0  * (  23.0D0 / 40.1D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0872D0  * ( 100.0D0 / 40.1D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0562D0  * ( 100.0D0 / 40.1D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        KCOR    = 0.0310D0  * (  23.0D0 / 39.1D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0252D0  * ( 100.0D0 / 39.1D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0176D0  * ( 100.0D0 / 39.1D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
! Fe3+ and Mn2+ for SIV oxidation
!         VAR(ind_L_FEPLUS3) = FE_SOL * FE_III * ( AEROSOL(LFEACC,ACC) + FECOR )
!         VAR(ind_L_MNPLUS2) = MN_SOL * MN_II * ( AEROSOL(LMNACC,ACC) + MNCOR )
          var(ind_l_feplus3) = aerosol(la3fe, cor)
          var(ind_l_mnplus2) = aerosol(lb2mn, cor)
!+ NACOR
          var(ind_l_naplus) = var(ind_l_naplus) + aerosol(lna, cor)
!         VAR(ind_L_CAPLUS2) = VAR(ind_L_CAPLUS2) + CACOR
!         VAR(ind_L_MGPLUS2) = VAR(ind_L_MGPLUS2) + MGCOR
!         VAR(ind_L_KPLUS) = VAR(ind_L_KPLUS) + KCOR
! Convert concententrations from input units mol/mol air --> molec/cm3 air
          cfactor = pres_pa/(temp_kpp*8.314510)*phi
          DO i=1,nvar
            var(i) = cfactor*var(i)
          END DO
!kf      FIX(indf_L_H2O) = 1.D0 * INVPHI2   ! set to 1 M -- Kw includes [H2O]
!
!  calculate initial H+ and OH- from electroneutrality and Kw
!
!  Sum of positive ions + H+ = Sum of negative ions + OH-
!
!  [H+] * [OH-] = Kw = 1.00E-14 * EXP( -6.71E+03 * ((1.d0 / TEMP_KPP) - (1.D0 / 298.D0)) )     ! Smith and Martell (1976)
!  [H+] = Kw / [OH-]
!
!  SUMPOS + Kw / [OH-] = SUMNEG + [OH-] -->  [OH-]**2 - (SUMPOS - SUMNEG)*[OH-] - Kw
!  Solve for [OH-] with quadratic formula and plug back into Kw relation to get initial [H+]
!        Kw = 1.00E-14 * EXP( -6.71E+03 * ((1.d0 / TEMP_KPP) - (1.D0 / 298.D0)))
! includes conc of H2O
          kw = 1.00d-14*EXP(-(6.955d+03*delinvt))
          sumpos = 2.d0*(var(ind_l_caplus2)+var(ind_l_mgplus2)) + var(
     +     ind_l_naplus) + var(ind_l_kplus) + var(ind_l_nh4plus)
          sumneg = 2.d0*(var(ind_l_so4min2)+var(ind_l_co3min2)) + var(
     +     ind_l_no3min) + var(ind_l_clmin)
          sumpos = sumpos*phi2
          sumneg = sumneg*phi2
          chgbal = sumpos - sumneg
          var(ind_l_ohmin) = (chgbal+SQRT(chgbal*chgbal+4.d0*kw))*0.5d0
          tmp = kw/var(ind_l_ohmin)
          CALL PUSHREAL4ARRAY(var(ind_l_hplus), dp/4)
          var(ind_l_hplus) = tmp
! Does that equal CHGBAL - OHMIN?
!    write(6,*) VAR(ind_L_HPLUS), VAR(ind_L_OHMIN) - CHGBAL
!	write(6,*) -DLOG10(VAR(ind_L_HPLUS))
          IF (var(ind_l_ohmin) .LT. 0.d0) THEN
            STOP
          ELSE
            varb(ind_l_hplus) = invphi2*varb(ind_l_hplus)
            varb(ind_l_ohmin) = invphi2*varb(ind_l_ohmin)
            CALL POPREAL4ARRAY(var(ind_l_hplus), dp/4)
            tmpb = varb(ind_l_hplus)
            varb(ind_l_hplus) = 0.0
            varb(ind_l_ohmin) = varb(ind_l_ohmin) - kw*tmpb/var(ind_l_ohmin)**
     +       2
            IF (kw*4.d0 + chgbal**2 .EQ. 0.0) THEN
              chgbalb = 0.5d0*varb(ind_l_ohmin)
            ELSE
              chgbalb = (0.5d0*2*chgbal/(2.0*SQRT(kw*4.d0+chgbal**2))+0.5d0)*
     +         varb(ind_l_ohmin)
            END IF
            varb(ind_l_ohmin) = 0.0
            sumposb = chgbalb
            sumnegb = -chgbalb
            sumnegb = phi2*sumnegb
            sumposb = phi2*sumposb
            varb(ind_l_so4min2) = varb(ind_l_so4min2) + 2.d0*sumnegb
            varb(ind_l_co3min2) = varb(ind_l_co3min2) + 2.d0*sumnegb
            varb(ind_l_no3min) = varb(ind_l_no3min) + sumnegb
            varb(ind_l_clmin) = varb(ind_l_clmin) + sumnegb
            varb(ind_l_caplus2) = varb(ind_l_caplus2) + 2.d0*sumposb
            varb(ind_l_mgplus2) = varb(ind_l_mgplus2) + 2.d0*sumposb
            varb(ind_l_naplus) = varb(ind_l_naplus) + sumposb
            varb(ind_l_kplus) = varb(ind_l_kplus) + sumposb
            varb(ind_l_nh4plus) = varb(ind_l_nh4plus) + sumposb
            DO i=nvar,1,-1
              varb(i) = cfactor*varb(i)
            END DO
            aerosolb(lna, cor) = aerosolb(lna, cor) + varb(ind_l_naplus)
            aerosolb(lb2mn, cor) = aerosolb(lb2mn, cor) + varb(ind_l_mnplus2)
            varb(ind_l_mnplus2) = 0.0
            aerosolb(la3fe, cor) = aerosolb(la3fe, cor) + varb(ind_l_feplus3)
            varb(ind_l_feplus3) = 0.0
            aerosolb(lk, cor) = aerosolb(lk, cor) + varb(ind_l_kplus)
            varb(ind_l_kplus) = 0.0
            aerosolb(lmgco3, cor) = aerosolb(lmgco3, cor) + varb(ind_l_mgplus2
     +       )
            varb(ind_l_mgplus2) = 0.0
            aerosolb(lcaco3, cor) = aerosolb(lcaco3, cor) + varb(ind_l_caplus2
     +       )
            varb(ind_l_caplus2) = 0.0
            aerosolb(lcaco3, cor) = aerosolb(lcaco3, cor) + varb(ind_l_co3min2
     +       )
            aerosolb(lmgco3, cor) = aerosolb(lmgco3, cor) + varb(ind_l_co3min2
     +       )
            varb(ind_l_co3min2) = 0.0
            gasb(lh2so4) = gasb(lh2so4) + varb(ind_l_so4min2)
!slz            aerosolb(lpoa, acc) = aerosolb(lpoa, acc) + varb(ind_l_poaacc)
            varb(ind_l_poaacc) = 0.0
            aerosolb(lorgc, acc) = aerosolb(lorgc, acc) + varb(ind_l_orgc)
            varb(ind_l_orgc) = 0.0
            aerosolb(lec, acc) = aerosolb(lec, acc) + varb(ind_l_pecacc)
            varb(ind_l_pecacc) = 0.0
            aerosolb(lna, acc) = aerosolb(lna, acc) + varb(ind_l_naplus)
            varb(ind_l_naplus) = 0.0
            aerosolb(lpri, acc) = aerosolb(lpri, acc) + varb(ind_l_priacc)
            varb(ind_l_priacc) = 0.0
            aerosolb(lcl, acc) = aerosolb(lcl, acc) + varb(ind_l_clmin)
            aerosolb(lcl, cor) = aerosolb(lcl, cor) + varb(ind_l_clmin)
            varb(ind_l_clmin) = 0.0
            aerosolb(lnh4, acc) = aerosolb(lnh4, acc) + varb(ind_l_nh4plus)
            aerosolb(lnh4, cor) = aerosolb(lnh4, cor) + varb(ind_l_nh4plus)
            varb(ind_l_nh4plus) = 0.0
            aerosolb(lno3, acc) = aerosolb(lno3, acc) + varb(ind_l_no3min)
            aerosolb(lno3, cor) = aerosolb(lno3, cor) + varb(ind_l_no3min)
            varb(ind_l_no3min) = 0.0
            aerosolb(lso4, acc) = aerosolb(lso4, acc) + varb(ind_l_so4min2)
            aerosolb(lso4, cor) = aerosolb(lso4, cor) + varb(ind_l_so4min2)
            varb(ind_l_so4min2) = 0.0
            aerosolb(lpri, akn) = aerosolb(lpri, akn) + varb(ind_a_priakn)
            varb(ind_a_priakn) = 0.0
!slz            aerosolb(lpoa, akn) = aerosolb(lpoa, akn) + varb(ind_a_poaakn)
            varb(ind_a_poaakn) = 0.0
            aerosolb(lec, akn) = aerosolb(lec, akn) + varb(ind_a_pecakn)
            varb(ind_a_pecakn) = 0.0
            aerosolb(lso4, akn) = aerosolb(lso4, akn) + varb(ind_a_so4akn)
            varb(ind_a_so4akn) = 0.0
            aerosolb(lna, akn) = aerosolb(lna, akn) + varb(ind_a_naakn)
            varb(ind_a_naakn) = 0.0
            aerosolb(lcl, akn) = aerosolb(lcl, akn) + varb(ind_a_clakn)
            varb(ind_a_clakn) = 0.0
            aerosolb(lnh4, akn) = aerosolb(lnh4, akn) + varb(ind_a_nh4akn)
            varb(ind_a_nh4akn) = 0.0
            aerosolb(lno3, akn) = aerosolb(lno3, akn) + varb(ind_a_no3akn)
            varb(ind_a_no3akn) = 0.0
            gasb(lmgly) = gasb(lmgly) + varb(ind_g_mgly)
            varb(ind_g_mgly) = 0.0
            gasb(lgly) = gasb(lgly) + varb(ind_g_gly)
            varb(ind_g_gly) = 0.0
            gasb(lhcl) = gasb(lhcl) + varb(ind_g_hcl)
            varb(ind_g_hcl) = 0.0
            gasb(lpaa) = gasb(lpaa) + varb(ind_g_paa)
            varb(ind_g_paa) = 0.0
            gasb(lmhp) = gasb(lmhp) + varb(ind_g_mhp)
            varb(ind_g_mhp) = 0.0
            gasb(lfoa) = gasb(lfoa) + varb(ind_g_hcooh)
            varb(ind_g_hcooh) = 0.0
            gasb(lo3) = gasb(lo3) + varb(ind_g_o3)
            varb(ind_g_o3) = 0.0
            gasb(lh2o2) = gasb(lh2o2) + varb(ind_g_h2o2)
            varb(ind_g_h2o2) = 0.0
            gasb(lnh3) = gasb(lnh3) + varb(ind_g_nh3)
            varb(ind_g_nh3) = 0.0
            gasb(lco2) = gasb(lco2) + varb(ind_g_co2)
            varb(ind_g_co2) = 0.0
            gasb(lhno3) = gasb(lhno3) + varb(ind_g_hno3)
            gasb(ln2o5) = gasb(ln2o5) + 2.d0*varb(ind_g_hno3)
            varb(ind_g_hno3) = 0.0
            gasb(lso2) = gasb(lso2) + varb(ind_g_so2)
          END IF
        END SUBROUTINE INITIALIZE_B
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!
! Initialize - function to initialize concentrations
!   Arguments :
!
! ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
!kf SUBROUTINE Initialize ( )
        SUBROUTINE INITIALIZE(temp2, pres_pa, taucld, prcrate, wcavg, wtavg,
     +   airm, alfa0, alfa3, gas, aerosol, cthk1)
!, DARK )
          USE AQCHEM_GLOBAL
          USE AQ_DATA
          IMPLICIT NONE
! End INLINED initializations
!         INCLUDE 'new_AQ_PARAMS.EXT'      ! aqueous chemistry parameters for box
          INTEGER :: i
          REAL(kind=dp) :: x
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!...........Arguments:
! total air mass in cloudy layers (mol/m2)
          REAL, INTENT(IN) :: airm
! scav coef for aitken aerosol number
          REAL, INTENT(IN) :: alfa0
! scav coef for aitken aerosol mass
          REAL, INTENT(IN) :: alfa3
! precip rate (mm/hr)
          REAL, INTENT(IN) :: prcrate
! pressure (Pa)
          REAL, INTENT(IN) :: pres_pa
! timestep for cloud (s)
          REAL, INTENT(IN) :: taucld
! temperature (K)
          REAL, INTENT(IN) :: temp2
! liquid water content (kg/m3)
          REAL, INTENT(IN) :: wcavg
! total water content (kg/m3)
          REAL, INTENT(IN) :: wtavg
!      LOGICAL,   INTENT( IN )  :: DARK      ! DARK = TRUE is night,  DARK = FALSE is day
! gas phase concentrations (mol/molV)
          REAL*8, INTENT(IN) :: gas(ngas)
! aerosol concentrations (mol/molV)
          REAL*8, INTENT(IN) :: aerosol(naer, nmodes)
          REAL*8, INTENT(IN) :: cthk1
!...........Local Variables:
!	Need to input and declare aqchem argument list
!	also declare CTHK1, TWASH, FE_SOL, FE_III, MN_SOL, MN_II
!	FECOR, MNCOR, NACOR, MGCOR, CACOR, KCOR, SUMPOS,
!	SUMNEG, Kw, CHGBAL
!	REAL( 8 ) :: CTHK1
          REAL*8 :: twash
!	REAL( 8 ) :: FE_SOL
!	REAL( 8 ) :: FE_III
!	REAL( 8 ) :: MN_SOL
!	REAL( 8 ) :: MN_II
!	REAL( 8 ) :: FECOR
!	REAL( 8 ) :: MNCOR
!	REAL( 8 ) :: NACOR
!	REAL( 8 ) :: MGCOR
!	REAL( 8 ) :: CACOR
!	REAL( 8 ) :: KCOR
          REAL*8 :: sumpos
          REAL*8 :: sumneg
          REAL*8 :: kw
!	REAL :: Kw
          REAL*8 :: chgbal
          INTRINSIC REAL
          INTRINSIC MAX
          INTRINSIC EXP
          INTRINSIC SQRT
          DOUBLE PRECISION :: max1
          DOUBLE PRECISION :: y1
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
          cfactor = 1.000000e+00_dp
          x = 0.0*cfactor
          DO i=1,nvar
            var(i) = x
          END DO
          x = 0.0*cfactor
          DO i=1,nfix
            fix(i) = x
          END DO
! constant rate coefficients
! END constant rate coefficients
! INLINED initializations
          tstart = 0.0d0
          dt = taucld
          tend = tstart + dt
          rtol = 1.0d-02
          atol = 1.0d-02
! Droplet diameter = 16 micrometers
          ddiam = 1.6d-5
          temp_kpp = temp2
! Pressure (ATM)
          press = pres_pa/101325.d0
          lwc_kpp = wcavg
! L H2O / L AIR
          lwcfrac = lwc_kpp*1.d-3
          inv_temp = 1.0d0/temp_kpp
          delinvt = (298.d0-temp_kpp)/(298.d0*temp_kpp)
          y1 = REAL(prcrate, 8)
          IF (1.0d-20 .LT. y1) THEN
            max1 = y1
          ELSE
            max1 = 1.0d-20
          END IF
!        CTHK1 = AIRM * TEMP_KPP * 0.08206D0 / ( PRESS * 1000.0D0 ) ! cloud thickness (m)
          twash = wtavg*1000.0d0*cthk1*3600.0d0/(1000.d0*max1)
          IF (prcrate .GT. 0.0) THEN
            wetfac_kpp = 1.d0/twash
          ELSE
            wetfac_kpp = 0.d0
          END IF
          alfa3_kpp = alfa3
          alfa0_kpp = alfa0
!     MGLYH = 3.2E+04  ! should depend on gas phase mech, just testing for now
          phi2 = 1000.d0/6.022d23/lwcfrac
          invphi2 = 1/phi2
! Fraction partitioning to FE(III) and MN(II)
!        IF ( DARK ) THEN
!           FE_III = 0.9D0  ! Night time, GS 01July2011
!        ELSE
!           FE_III = 0.1D0  ! Day time, GS 01July2011
!        END IF
!
!        MN_II = 1.0D0
! Solubility of Fe and Mn
!        FE_SOL = 0.1D0
!        MN_SOL = 0.5D0
! Set initial dynamic concentrations based on input gas and aerosol concentrations
          var(ind_g_so2) = gas(lso2)
          var(ind_g_hno3) = gas(lhno3) + 2.d0*gas(ln2o5)
          var(ind_g_co2) = gas(lco2)
          var(ind_g_nh3) = gas(lnh3)
          var(ind_g_h2o2) = gas(lh2o2)
          var(ind_g_o3) = gas(lo3)
          var(ind_g_hcooh) = gas(lfoa)
          var(ind_g_mhp) = gas(lmhp)
          var(ind_g_paa) = gas(lpaa)
          var(ind_g_hcl) = gas(lhcl)
          var(ind_g_gly) = gas(lgly)
          var(ind_g_mgly) = gas(lmgly)
!        VAR(ind_G_HO) = GAS(LHO)
!        VAR(ind_G_N2O5) = GAS(LN2O5)   -- added to HNO3
!        VAR(ind_G_H2SO4) = GAS(LH2SO4)  -- added to SO4MIN2
          var(ind_a_no3akn) = aerosol(lno3, akn)
          var(ind_a_nh4akn) = aerosol(lnh4, akn)
          var(ind_a_clakn) = aerosol(lcl, akn)
          var(ind_a_naakn) = aerosol(lna, akn)
          var(ind_a_so4akn) = aerosol(lso4, akn)
          var(ind_a_pecakn) = aerosol(lec, akn)
!slz          var(ind_a_poaakn) = aerosol(lpoa, akn)
          var(ind_a_priakn) = aerosol(lpri, akn)
!     VAR(ind_A_NUMAKN) = AEROSOL(LNUM,AKN)
! Instantaneous droplet activation of ACC and COR modes and dissolution of N2O5 and H2SO4
          var(ind_l_so4min2) = aerosol(lso4, acc) + aerosol(lso4, cor)
          var(ind_l_no3min) = aerosol(lno3, acc) + aerosol(lno3, cor)
          var(ind_l_nh4plus) = aerosol(lnh4, acc) + aerosol(lnh4, cor)
          var(ind_l_clmin) = aerosol(lcl, acc) + aerosol(lcl, cor)
          var(ind_l_priacc) = aerosol(lpri, acc)
          var(ind_l_naplus) = aerosol(lna, acc)
!     VAR(ind_L_CAPLUS2) = AEROSOL(LCAACC,ACC)
!     VAR(ind_L_MGPLUS2) = AEROSOL(LMGACC,ACC)
!     VAR(ind_L_KPLUS) = AEROSOL(LKACC,ACC)
          var(ind_l_pecacc) = aerosol(lec, acc)
          var(ind_l_orgc) = aerosol(lorgc, acc)
!slz          var(ind_l_poaacc) = aerosol(lpoa, acc)
          var(ind_l_so4min2) = var(ind_l_so4min2) + gas(lh2so4)
          var(ind_l_co3min2) = aerosol(lcaco3, cor) + aerosol(lmgco3, cor)
          var(ind_l_caplus2) = aerosol(lcaco3, cor)
          var(ind_l_mgplus2) = aerosol(lmgco3, cor)
          var(ind_l_kplus) = aerosol(lk, cor)
! Coarse crustal species from SOILCOR, ANTHCOR, SEASCOR
!        FECOR   = 0.0281D0  * ( 100.0D0 / 55.8D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0467D0  * ( 100.0D0 / 55.8D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        MNCOR   = 0.00078D0 * ( 100.0D0 / 54.9D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0011D0  * ( 100.0D0 / 54.9D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        NACOR   = 0.8373D0  * (  23.0D0 / 23.0D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0652D0  * ( 100.0D0 / 23.0D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0023D0  * ( 100.0D0 / 23.0D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        MGCOR   = 0.0997D0  * (  23.0D0 / 24.3D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0000D0  * ( 100.0D0 / 24.3D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0032D0  * ( 100.0D0 / 24.3D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        CACOR   = 0.0320D0  * (  23.0D0 / 40.1D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0872D0  * ( 100.0D0 / 40.1D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0562D0  * ( 100.0D0 / 40.1D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
!        KCOR    = 0.0310D0  * (  23.0D0 / 39.1D0 ) * AEROSOL(LSEASC,COR)
!                + 0.0252D0  * ( 100.0D0 / 39.1D0 ) * AEROSOL(LSOILC,COR) / ( 1.0 - 0.04642 )
!                + 0.0176D0  * ( 100.0D0 / 39.1D0 ) * AEROSOL(LANTHC,COR) / ( 1.0 - 0.00325 )
! Fe3+ and Mn2+ for SIV oxidation
!         VAR(ind_L_FEPLUS3) = FE_SOL * FE_III * ( AEROSOL(LFEACC,ACC) + FECOR )
!         VAR(ind_L_MNPLUS2) = MN_SOL * MN_II * ( AEROSOL(LMNACC,ACC) + MNCOR )
          var(ind_l_feplus3) = aerosol(la3fe, cor)
          var(ind_l_mnplus2) = aerosol(lb2mn, cor)
!+ NACOR
          var(ind_l_naplus) = var(ind_l_naplus) + aerosol(lna, cor)
!         VAR(ind_L_CAPLUS2) = VAR(ind_L_CAPLUS2) + CACOR
!         VAR(ind_L_MGPLUS2) = VAR(ind_L_MGPLUS2) + MGCOR
!         VAR(ind_L_KPLUS) = VAR(ind_L_KPLUS) + KCOR
! Convert concententrations from input units mol/mol air --> molec/cm3 air
          cfactor = pres_pa/(temp_kpp*8.314510)*phi
          DO i=1,nvar
            var(i) = cfactor*var(i)
          END DO
          DO i=1,nfix
            fix(i) = cfactor*fix(i)
          END DO
!kf      FIX(indf_L_H2O) = 1.D0 * INVPHI2   ! set to 1 M -- Kw includes [H2O]
!
          fix(indf_l_h2o) = 55.5d0*invphi2
          fix(indf_l_ho) = gas(lho)*press*30.d0*EXP(4.5d3*delinvt)*invphi2
!  calculate initial H+ and OH- from electroneutrality and Kw
!
!  Sum of positive ions + H+ = Sum of negative ions + OH-
!
!  [H+] * [OH-] = Kw = 1.00E-14 * EXP( -6.71E+03 * ((1.d0 / TEMP_KPP) - (1.D0 / 298.D0)) )     ! Smith and Martell (1976)
!  [H+] = Kw / [OH-]
!
!  SUMPOS + Kw / [OH-] = SUMNEG + [OH-] -->  [OH-]**2 - (SUMPOS - SUMNEG)*[OH-] - Kw
!  Solve for [OH-] with quadratic formula and plug back into Kw relation to get initial [H+]
!        Kw = 1.00E-14 * EXP( -6.71E+03 * ((1.d0 / TEMP_KPP) - (1.D0 / 298.D0)))
! includes conc of H2O
          kw = 1.00d-14*EXP(-(6.955d+03*delinvt))
          sumpos = 2.d0*(var(ind_l_caplus2)+var(ind_l_mgplus2)) + var(
     +     ind_l_naplus) + var(ind_l_kplus) + var(ind_l_nh4plus)
          sumneg = 2.d0*(var(ind_l_so4min2)+var(ind_l_co3min2)) + var(
     +     ind_l_no3min) + var(ind_l_clmin)
          sumpos = sumpos*phi2
          sumneg = sumneg*phi2
          chgbal = sumpos - sumneg
          var(ind_l_ohmin) = (chgbal+SQRT(chgbal*chgbal+4.d0*kw))*0.5d0
          var(ind_l_hplus) = kw/var(ind_l_ohmin)
! Does that equal CHGBAL - OHMIN?
!    write(6,*) VAR(ind_L_HPLUS), VAR(ind_L_OHMIN) - CHGBAL
!	write(6,*) -DLOG10(VAR(ind_L_HPLUS))
          IF (var(ind_l_ohmin) .LT. 0.d0) THEN
            PRINT*, 'NEGATIVE INITIAL OHMIN+HPLUS CONC'
            STOP
          ELSE
            var(ind_l_ohmin) = var(ind_l_ohmin)*invphi2
            var(ind_l_hplus) = var(ind_l_hplus)*invphi2
            rconst(1) = KMTF(0.11d0, 1.28d-5, 64.064d0)
            rconst(2) = KMTF(0.0868d0, 1.32d-5, 63.013d0)
            rconst(3) = KMTF(0.00015d0, 1.55d-5, 44.01d0)
            rconst(4) = KMTF(0.091d0, 2.3d-5, 17.031d0)
            rconst(5) = KMTF(0.1532d0, 1.46d-5, 34.015d0)
            rconst(6) = KMTF(0.1d0, 1.48d-5, 47.998d0)
            rconst(7) = KMTF(0.0229d0, 1.53d-5, 46.025d0)
            rconst(8) = KMTF(0.006758d0, 1.31d-5, 48.04d0)
            rconst(9) = KMTF(0.019d0, 1.02d-5, 76.05d0)
            rconst(10) = KMTF(0.1158d0, 1.89d-5, 36.461d0)
            rconst(11) = KMTF(0.023d0, 1.15d-5, 58.04d0)
            rconst(12) = KMTF(0.023d0, 1.15d-5, 72.06d0)
            rconst(13) = KMTB(1.4d+00, 2.9d+03, 0.11d0, 1.28d-5, 64.064d0)
            rconst(14) = KMTB(2.1d+05, 8.7d+03, 0.0868d0, 1.32d-5, 63.013d0)
            rconst(15) = KMTB(3.6d-02, 2.2d+03, 0.00015d0, 1.55d-5, 44.01d0)
            rconst(16) = KMTB(6.1d+01, 4.2d+03, 0.091d0, 2.3d-5, 17.031d0)
            rconst(17) = KMTB(8.3d+04, 7.4d+03, 0.1532d0, 1.46d-5, 34.015d0)
            rconst(18) = KMTB(1.14d-02, 2.3d+03, 0.1d0, 1.48d-5, 47.998d0)
            rconst(19) = KMTB(8.9d+03, 6.1d+03, 0.0229d0, 1.53d-5, 46.025d0)
            rconst(20) = KMTB(3.1d+02, 5.2d+03, 0.006758d0, 1.31d-5, 48.04d0)
            rconst(21) = KMTB(8.4d+02, 5.3d+03, 0.019d0, 1.02d-5, 76.05d0)
            rconst(22) = KMTB(1.9d+01, 6.0d+02, 0.1158d0, 1.89d-5, 36.461d0)
            rconst(23) = KMTB(3.6d+05, 0.0d+00, 0.023d0, 1.15d-5, 58.04d0)
            rconst(24) = KMTB(mglyh, 0.0d+0, 0.023d0, 1.15d-5, 72.06d0)
            rconst(25) = alfa3_kpp
            rconst(26) = alfa3_kpp
            rconst(27) = alfa3_kpp
            rconst(28) = alfa3_kpp
            rconst(29) = alfa3_kpp
            rconst(30) = alfa3_kpp
            rconst(31) = alfa3_kpp
            rconst(32) = alfa3_kpp
            rconst(55) = ORG(3.0d10)
            rconst(56) = ORG(3.0d10)
            rconst(73) = wetfac_kpp
            rconst(74) = wetfac_kpp
            rconst(75) = wetfac_kpp
            rconst(76) = wetfac_kpp
            rconst(77) = wetfac_kpp
            rconst(78) = wetfac_kpp
            rconst(79) = wetfac_kpp
            rconst(80) = wetfac_kpp
            rconst(81) = wetfac_kpp
            rconst(82) = wetfac_kpp
            rconst(83) = wetfac_kpp
            rconst(84) = wetfac_kpp
            rconst(85) = wetfac_kpp
            rconst(86) = wetfac_kpp
            rconst(87) = wetfac_kpp
            rconst(88) = wetfac_kpp
            rconst(89) = wetfac_kpp
            rconst(90) = wetfac_kpp
            rconst(91) = wetfac_kpp
            rconst(92) = wetfac_kpp
            rconst(93) = wetfac_kpp
            rconst(94) = wetfac_kpp
            rconst(95) = wetfac_kpp
            rconst(96) = wetfac_kpp
            rconst(97) = wetfac_kpp
            rconst(98) = wetfac_kpp
            rconst(99) = wetfac_kpp
            rconst(100) = wetfac_kpp
            rconst(101) = wetfac_kpp
            rconst(102) = wetfac_kpp
            rconst(103) = wetfac_kpp
            rconst(104) = wetfac_kpp
            rconst(105) = wetfac_kpp
            rconst(106) = wetfac_kpp
            rconst(107) = wetfac_kpp
          END IF
        END SUBROUTINE INITIALIZE
        REAL(kind=dp) FUNCTION KMTF(acc, dg, mw)
          IMPLICIT NONE
! accommodation coefficient     ! unitless
          REAL(kind=dp) :: acc
! Gas molecular diffusion coef !m2/s
          REAL(kind=dp) :: dg
! molecular weight
          REAL(kind=dp) :: mw
          REAL(kind=dp) :: kmt, rho1, rad, r, pi, v
          INTRINSIC SQRT
!g/mL - density of H2O
          rho1 = 1.d0
! m
          rad = ddiam*0.5d0
          r = 8.3145d0
          pi = 3.1415926536
          kmt = rad*rad/(3.d0*dg)
!V = ( 8.D0 * R * TEMP_KPP * 1000.d0 / PI / MW )**0.5  ! m/s
          v = SQRT(8.d0*r*temp_kpp*1000.d0/pi/mw)
          kmt = kmt + 4*rad/(3*v*acc)
! from Schwartz, 1986
          kmt = 1.d0/kmt
! implied division by RHO1 (=1)
          kmtf = kmt*lwc_kpp/1000.d0
          RETURN
        END FUNCTION KMTF
        REAL(kind=dp) FUNCTION KMTB(hl, dh, acc, dg, mw)
          IMPLICIT NONE
          REAL(kind=dp) :: hl, dh
! accommodation coefficient
          REAL(kind=dp) :: acc
! Gas molecular diffusion coef
          REAL(kind=dp) :: dg
! molecular weight
          REAL(kind=dp) :: mw
          REAL(kind=dp) :: hlconst, rho1, rad, r, pi, kmt, v, r2
          INTRINSIC SQRT
          INTRINSIC EXP
          rad = ddiam*0.5d0
! J / mol-K
          r = 8.3145d0
! L-atm / mol-K  (= R/101325)
          r2 = 0.08206d0
          pi = 3.1415926536
          kmt = rad*rad/(3.d0*dg)
! ( 8.D0 * R * TEMP_KPP * 1000.d0 / PI / MW )**0.5  ! m/s
          v = SQRT(8.d0*r*temp_kpp*1000.d0/pi/mw)
          kmt = kmt + 4*rad/(3*v*acc)
! from Schwartz, 1986
          kmt = 1.d0/kmt
          hlconst = hl*EXP(dh*delinvt)
          kmtb = kmt/(r2*temp_kpp*hlconst)
          RETURN
        END FUNCTION KMTB
        REAL(kind=dp) FUNCTION ORG(korg)
          IMPLICIT NONE
          REAL(kind=dp) :: korg
          org = korg
          org = org*phi2
          RETURN
        END FUNCTION ORG
      END MODULE AQCHEM_INITIALIZE_B
